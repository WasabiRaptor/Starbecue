{
	"pred" : {},
	"prey" : {},
	"locations" : {
		"belly" : {}
	},
	"scripts" : ["/humanoid/any/voreScripts.lua"],
	"states" : {
		"default" : {
			"actions" : {
				"example" : {
					// compares settings before attempting to perform the action, only defined values need to match
					"settings": {}, // compares with sbq.settings
					// having target settings defined will automatically fail the action if there is no target!
					"targetSettings": {}, // checks the sbqPublicSettings property on the targeted entity to compare
					// if settings checks pass, it will attempt to run a script before going further when defined
					// checks the state for a script with the matching name to run
					// if there is not one specific to the state, it will check for one in the "default"
					// state with a matching name, if there is no script it automatically fails
					"script" : "scriptName", // if the script returns a truthy value, things will continue
					// if settings and script were successful it will attempt to start every animation defined here
					"animations" : {
						"animationState" : "animation",
						// if the target is/becomes an occupant the <occupant> tag in any key
						// will automatically be assigned to that occupant's seat
						"<occupant>State" : ["animation", true, false]
						// an animation can also be defined as an array to set additional args
						// [1] String the name of the animation
						// [2] Bool the animation is forced to restart
						// [3] Bool the animation should play in reverse
					},
					// cooldown after a success from settings and script until the action can be attempted again
					// optional arg, if undefined, assumed to be the length of the longest animation
					"cooldown" : 1,
					// cooldown after a failure from settings and script until the action can be attempted again
					// optional arg, if undefined, assumed to be 0
					"failureCooldown" : 0
				},
				"oralVore" : {
					"targetSettings" : {
						"oralVorePrey" : true
					},
					"settings" : {
						"oralVorePred" : true
					},
					"script" : "tryVore",
					"animations" : {
						"<occupant>State" : ["oralVore",true]
					}
				},
				"oralVoreLetout" : {
					"targetSettings" : {
						"oralVorePrey" : true
					},
					"settings" : {
						"oralVorePred" : true
					},
					"script" : "tryLetout",
					"animations" : {
						"<occupant>State" : ["oralVore",true, true]
					}
				}
			}
		}
	}
}
