{
	"dialogueFile" : "/npcs/sbq/dialogue/default.dialogue",
	// after following a path, next steps will automatically advance down the tree building the result dialogue

	// overall default values for a "new" dialogue
	"defaultResults" : {
		"entityPortrait" : ["bust"],
		// "dialogue" : [":missingDialogue"],
		"textSound": ["/sfx/interface/aichatter1.ogg"],
		"textVolume" : [1],
		"jump" : ".greeting" // if a part of the dialogue tree goes to a part that has no data for continuation via the button it will jump to which one of these it saw last while moving down the tree
	},
	// greeting is the default start of the tree
	// settings come from itself
	"greeting" : {
		"new" : {"jump" : ".converse"},
		"next" : "giveRewards",
		"rewards" : {
			"replace" : {"dialogueRandom" : [":greetingRewards"]},
			"next" : ["introduced"],
			"true" : {
				"replace" : {"dialogueRandom" : [":greetingRewardsIntroduced"]}
			}
		},
		"default" : {
			"next" : ["isOwner"],
			"replace" : {"dialogueRandom" : [":greeting"]},
			"true" : {
				"next" : ["isFollowing"],
				"replace" : {
					"dialogueRandom" : [":greetingCrew"]
				},
				"true" : { "replace" : {
					"buttonText" : ["Stay"],
					"jump" : ".stay"
				}},
				"false" : {"replace" : {
					"buttonText": ["Follow"],
					"jump" : ".follow"
				}}
			}
		},
		"stay" : {
			"next" : ["requestUnfollow"],
			"new" : {
				"dialogueRandom" : [":crewStay"]
			}
		},
		"follow" : {
			"next" : ["canGainFollowers"],
			"false" : {
				"new" : {"dialogueRandom" : [":fullCrew"]}
			},
			"true" : {
				"next" : ["requestFollow"],
				"new" : {"dialogueRandom" : [":crewFollow"]}
			}
		}
	},
	// lines triggered when a player may recieve a certain reward
	"rewardNotify" :{
		"new" : {},
		"next" : ["poolName", "rewardName"],
		"money" : {
			"replace" : {"dialogueRandom":[":rewardNotifyMoney"]}
		},
		"lowValueQuestRewards" : {
			"replace" : {"dialogueRandom":[":rewardNotifyLowValueQuestRewards"]}
		},
		"mediumValueQuestRewards" : {
			"replace" : {"dialogueRandom":[":rewardNotifyMediumValueQuestRewards"]}
		},
		"highValueQuestRewards" : {
			"replace" : {"dialogueRandom":[":rewardNotifyHighValueQuestRewards"]}
		}
	},

	// responses when another character requests an action from them
	"actionRequested" : {
		"<action>" : {
			// is the action available or not?
			"true" : {
				// dialogue said before the action
				"new" : {"dialogueRandom" : [":<action>RequestedBefore"]},
				// dialogue said after the action finishes
				"after" : {"new" : {"dialogueRandom" : [":<action>RequestedAfter"]}}
			},
			"false" : {
				"default" : {"new":{"dialogueRandom":":<action>Invalid"}},
				"error" : {"new":{"dialogueRandom" : [":error"]}},
				"no" : {"new" : {"dialogueRandom" : [":<action>No"]}},
				"tooBig" : {"new" : {"dialogueRandom" : [":<action>TooBig"]}},
				"tooSmall" : {"new" : {"dialogueRandom" : [":<action>TooSmall"]}},
				"noSlots" : {"new" : {"dialogueRandom" : [":<action>NoSlots"]}},
				"noSpace" : {"new" : {"dialogueRandom" : [":<action>Full"]}},
				"needsInfusion" : {"new" : {"dialogueRandom" : [":<action>NeedsInfusion"]}},
				"alreadyInfused" : {"new" : {"dialogueRandom" : [":<action>AlreadyInfused"]}},
				"invalidLocation" : ".error",
				"settingsMismatch" : ".error",
				"targetSettingsMismatch" : ".error",
				"targetPreySettingsMismatch" : {"new":{"dialogueRandom":[":<action>TargetPreySettingsMismatch"]}}
			}
		},
		"oralVore" : {
			// is the action available or not?
			"true" : {
				// dialogue said before the action
				"new" : {"dialogueRandom" : [":oralVoreRequestedBefore"]},
				// dialogue said after the action finishes
				"after" : {"new" : {"dialogueRandom" : [":oralVoreRequestedAfter"]}}
			},
			"false" : {
				"default" : {"new":{"dialogueRandom":":oralVoreInvalid"}},
				"error" : {"new":{"dialogueRandom" : [":error"]}},
				"no" : {"new" : {"dialogueRandom" : [":oralVoreNo"]}},
				"tooBig" : {"new" : {"dialogueRandom" : [":oralVoreTooBig"]}},
				"tooSmall" : {"new" : {"dialogueRandom" : [":oralVoreTooSmall"]}},
				"noSlots" : {"new" : {"dialogueRandom" : [":oralVoreNoSlots"]}},
				"noSpace" : {"new" : {"dialogueRandom" : [":oralVoreFull"]}},
				"needsInfusion" : {"new" : {"dialogueRandom" : [":oralVoreNeedsInfusion"]}},
				"alreadyInfused" : {"new" : {"dialogueRandom" : [":oralVoreAlreadyInfused"]}},
				"invalidLocation" : ".error",
				"settingsMismatch" : ".error",
				"targetSettingsMismatch" : ".error",
				"targetPreySettingsMismatch" : {"new":{"dialogueRandom":[":oralVoreTargetPreySettingsMismatch"]}}
			}
		}

	},
	// when they prompt doing an action to another character
	"promptAction" : {
		"<action>" : {
			"new" : {
				"settings" : "target",
				"dialogueRandom" : [":<action>Prompt"],
				"buttonText" : [":ynPrompt"],
				"options" : [
					[":optionYes", ".yes" ],
					[":optionNo", ".no" ],
					[":optionNoYes", ".noYes" ]
				]
			},
			// responses based on their response to the prompt
			"yes" : {
				"settings" : "target",
				"jump" : ".finish",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, true, "yes", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>PromptYes"],"dismissTime" : 2, "jump" : ".finish"},
				// what they say after doing the action (optional)
				"after" : {"new" : {"dialogueRandom" : [":<action>PromptYesAfter"],"dismissTime" : 2, "jump" : false}}
			},
			"no" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [false, true, "no", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>PromptNo"],"dismissTime" : 2, "jump" : ".finish"}
			},
			"noYes" : {
				"settings" : "target",
				"jump" : ".finish",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, true, "noYes", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>PromptNoYes"],"dismissTime" : 2, "jump" : ".finish"},
				// what they say after doing the action (optional)
				"after" : {"new" : {"dialogueRandom" : [":<action>PromptNoYesAfter"],"dismissTime" : 2, "jump" : false}}
			}
		},
		"oralVore" : {
			"settings" : "target",
			"new" : {
				"dialogueRandom" : [":oralVorePrompt"],
				"buttonText" : [":ynPrompt"],
				"options" : [
					[":optionYes", ".yes" ],
					[":optionNo", ".no" ],
					[":optionNoYes", ".noYes" ]
				]
			},
			// responses based on their response to the prompt
			"yes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, true, "yes", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVorePromptYes"],"dismissTime" : 2, "jump" : ".finish"},
				// what they say after doing the action (optional)
				"after" : {"new" : {"dialogueRandom" : [":oralVorePromptYesAfter"],"dismissTime" : 2, "jump" : false}}
			},
			"no" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [false, true, "no", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVorePromptNo"],"dismissTime" : 2, "jump" : ".finish"}
			},
			"noYes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, true, "noYes", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVorePromptNoYes"],"dismissTime" : 2, "jump" : ".finish"},
				// what they say after doing the action (optional)
				"after" : {"new" : {"dialogueRandom" : [":oralVorePromptNoYesAfter"],"dismissTime" : 2, "jump" : false}}
			}
		}

	},
	// when they ask another character to do something to them
	"requestAction":{
		"<action>" : {
			"settings" : "target",
			"new" : {
				"dialogueRandom" : [":<action>Requesting"],
				"buttonText" : [":ynPrompt"],
				"options" : [
					[":optionYes", ".yes" ],
					[":optionNo", ".no" ],
					[":optionNoYes", ".noYes" ]
				]
			},
			"yes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, false, "yes", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>RequestingYes"],"dismissTime" : 2, "jump" : ".finish"},
				"after" : {"new" : {"dialogueRandom" : [":<action>RequestingYesAfter"],"dismissTime" : 2, "jump" : false}}
			},
			"no" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [false, false, "no", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>RequestingNo"],"dismissTime" : 2, "jump" : ".finish"},
			},
			"noYes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, false, "noYes", "<action>"]
				},
				"new" : {"dialogueRandom" : [":<action>RequestingNoYes"],"dismissTime" : 2, "jump" : ".finish"},
				"after" : {"new" : {"dialogueRandom" : [":<action>RequestingNoYesAfter"],"dismissTime" : 2, "jump" : false}}
			}
		},
		"oralVore" : {
			"settings" : "target",
			"new" : {
				"dialogueRandom" : [":oralVoreRequesting"],
				"buttonText" : [":ynPrompt"],
				"options" : [
					[":optionYes", ".yes" ],
					[":optionNo", ".no" ],
					[":optionNoYes", ".noYes" ]
				]
			},
			"yes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, false, "yes", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVoreRequestingYes"],"dismissTime" : 2, "jump" : ".finish"},
				"after" : {"new" : {"dialogueRandom" : [":oralVoreRequestingYesAfter"],"dismissTime" : 2, "jump" : false}}
			},
			"no" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [false, false, "no", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVoreRequestingNo"],"dismissTime" : 2, "jump" : ".finish"},
			},
			"noYes" : {
				"settings" : "target",
				"finish" : {
					"settings" : "target",
					"next" : ["promptResponse", "dismiss"],
					"promptResponse" : [true, false, "noYes", "oralVore"]
				},
				"new" : {"dialogueRandom" : [":oralVoreRequestingNoYes"],"dismissTime" : 2, "jump" : ".finish"},
				"after" : {"new" : {"dialogueRandom" : [":oralVoreRequestingNoYesAfter"],"dismissTime" : 2, "jump" : false}}
			}
		}
	},

	// when they notify that they're about to do an action without asking first
	"noPromptAction" : {
		"<action>" : {
			"new" : {"dialogueRandom" : [":<action>NoPrompt"]},
			"after" : {"new" : {"dialogueRandom" : [":<action>NoPromptAfter"]}}
		},
		"oralVore" : {
			"new" : {"dialogueRandom" : [":oralVoreNoPrompt"]},
			"after" : {"new" : {"dialogueRandom" : [":oralVoreNoPromptAfter"]}}
		}
	},
	// responding to an action happening to them unprompted
	"unpromptedAction" : {
		"<action>" : {
			"new" : {"dialogueRandom" : [":<action>Unprompted"]},
			"after" : {"new" : {"dialogueRandom" : [":<action>UnpromptedAfter"]}}
		},
		"oralVore" : {
			"new" : {"dialogueRandom" : [":oralVoreUnprompted"]},
			"after" : {"new" : {"dialogueRandom" : [":oralVoreUnpromptedAfter"]}}
		}
	},

	// for when forcing another character to do an action (mostly for prey forcing their way into a pred)
	"forcingAction" : {
		"<action>" : {
			"replace" : { "dialogueRandom" : [":<action>Forcing"]},
			"after":{"replace" : { "dialogueRandom" : [":<action>ForcingAfter"]}}
		},
		"oralVore" : {
			"replace" : { "dialogueRandom" : [":oralVoreForcing"]},
			"after":{"replace" : { "dialogueRandom" : [":oralVoreForcingAfter"]}}
		}
	},
	// response to when another NPC forces them to do an action
	"forcedAction" : {
		"<action>" : {
			"replace" : { "dialogueRandom" : [":<action>Forced"]},
			"after":{"replace" : { "dialogueRandom" : [":<action>ForcedAfter"]}}
		},
		"oralVore" : {
			"replace" : { "dialogueRandom" : [":oralVoreForced"]},
			"after":{"replace" : { "dialogueRandom" : [":oralVoreForcedAfter"]}}
		}
	},

	// dialogue for when an occupant interacts with them
	"occupantInteract" : ".occupantStruggle", // just points to struggle for now, could be it's own dialogue
	// chance of saying one of these lines when one of their occupants struggles inside them
	"occupantStruggle" : {
		"settings" : "target",
		"new" : {},
		"next" : [
			"adjectives",
			"location",

			"sbqHeal",
			"sbqFemcumHeal",

			"sbq_acidSoftDigest",
			"sbq_cumSoftDigest",
			"sbq_femcumSoftDigest",
			"sbq_milkSoftDigest",

			"sbq_acidDigest",
			"sbq_cumDigest",
			"sbq_femcumDigest",
			"sbq_milkDigest",

			"sbqTransformation",
			"sbqDrainEnergy",
			"sbqEggify",

			"sbq_tailInfuse",
			"sbq_pawInfuse",
			"sbq_thighsInfuse",
			"sbq_bellyInfuse",
			"sbq_breastInfuse",
			"sbq_cockInfuse",
			"sbq_pussyInfuse"
		],
		"adjectives" : {

		},
		"location" : {

		},
		"sbqHeal" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleHeal"]
			}
		},
		"sbqFemcumHeal" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleFemcumHeal"]
			}
		},
		"sbq_acidDigest" : {
			"next" : ["sbq_acidDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleAcidDigest"]
			},
			"sbq_acidDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : [":struggleAcidDigestImmune"]
				}
			}
		},
		"sbq_cumDigest" : {
			"next" : ["sbq_cumDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleCumDigest"]
			},
			"sbq_cumDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : [":struggleCumDigestImmune"]
				}
			}
		},
		"sbq_femcumDigest" : {
			"next" : ["sbq_femcumDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : ["struggleFemcumDigest"]
			},
			"sbq_femcumDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : ["struggleFemcumDigestImmune"]
				}
			}
		},
		"sbq_milkDigest" : {
			"next" : ["sbq_milkDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : ["struggleMilkDigest"]
			},
			"sbq_milkDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : ["struggleMilkDigestImmune"]
				}
			}
		},
		"sbq_acidSoftDigest" : ".sbq_acidDigest",
		"sbq_cumSoftDigest" : ".sbq_cumDigest",
		"sbq_femcumSoftDigest" : ".sbq_femcumDigest",
		"sbq_milkSoftDigest" : ".sbq_milkDigest",

		"sbqTransformation" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleTransforming"]
			}
		},
		"sbqDrainEnergy" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleDrainEnergy"]
			}
		},
		"sbqEggify" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleEggify"]
			}
		},

		"sbq_tailInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleTailInfuse"]
			}
		},
		"sbq_pawInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglePawInfuse"]
			}
		},
		"sbq_thighsInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleThighsInfuse"]
			}
		},
		"sbq_bellyInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleBellyInfuse"]
			}
		},
		"sbq_breastInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleBreastInfuse"]
			}
		},
		"sbq_cockInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":struggleCockInfuse"]
			}
		},
		"sbq_pussyInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglePussyInfuse"]
			}
		}
	},

	"loungingInteract" : ".struggling",
	// when struggling in a pred
	"struggling" : {
		"settings" : "self",
		"new" : {
			"textVolume" : [0.5]
		},
		"next" : [
			"adjectives",
			"location",

			"sbqHeal",
			"sbqFemcumHeal",

			"sbq_acidSoftDigest",
			"sbq_cumSoftDigest",
			"sbq_femcumSoftDigest",
			"sbq_milkSoftDigest",

			"sbq_acidDigest",
			"sbq_cumDigest",
			"sbq_femcumDigest",
			"sbq_milkDigest",

			"sbqTransformation",
			"sbqDrainEnergy",
			"sbqEggify",

			"sbq_tailInfuse",
			"sbq_pawInfuse",
			"sbq_thighsInfuse",
			"sbq_bellyInfuse",
			"sbq_breastInfuse",
			"sbq_cockInfuse",
			"sbq_pussyInfuse"
		],
		"adjectives" : {

		},
		"location" : {

		},
		"sbqHeal" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingHeal"]
			}
		},
		"sbqFemcumHeal" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingFemcumHeal"]
			}
		},
		"sbq_acidDigest" : {
			"next" : ["sbq_acidDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingAcidDigest"]
			},
			"sbq_acidDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : [":strugglingAcidDigestImmune"]
				}
			}
		},
		"sbq_cumDigest" : {
			"next" : ["sbq_cumDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingCumDigest"]
			},
			"sbq_cumDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : [":strugglingCumDigestImmune"]
				}
			}
		},
		"sbq_femcumDigest" : {
			"next" : ["sbq_femcumDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : ["strugglingFemcumDigest"]
			},
			"sbq_femcumDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : ["strugglingFemcumDigestImmune"]
				}
			}
		},
		"sbq_milkDigest" : {
			"next" : ["sbq_milkDigestResistance"],
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : ["strugglingMilkDigest"]
			},
			"sbq_milkDigestResistance_notPositive" : { // it's a multiplier, so it not being positive means it must be 0 or less, and therefore immune
				"queueReplace" : {
					"dialogueRandom" : ["strugglingMilkDigestImmune"]
				}
			}
		},
		"sbq_acidSoftDigest" : ".sbq_acidDigest",
		"sbq_cumSoftDigest" : ".sbq_cumDigest",
		"sbq_femcumSoftDigest" : ".sbq_femcumDigest",
		"sbq_milkSoftDigest" : ".sbq_milkDigest",

		"sbqTransformation" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingTransforming"]
			}
		},
		"sbqDrainEnergy" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingDrainEnergy"]
			}
		},
		"sbqEggify" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingEggify"]
			}
		},

		"sbq_tailInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingTailInfuse"]
			}
		},
		"sbq_pawInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingPawInfuse"]
			}
		},
		"sbq_thighsInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingThighsInfuse"]
			}
		},
		"sbq_bellyInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingBellyInfuse"]
			}
		},
		"sbq_breastInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingBreastInfuse"]
			}
		},
		"sbq_cockInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingCockInfuse"]
			}
		},
		"sbq_pussyInfuse" : {
			"addQueued" : true,
			"queueReplace" : {
				"dialogueRandom" : [":strugglingPussyInfuse"]
			}
		}
	},

	// a line of dialogue triggered when size is changed by the size ray or something else
	"sizeChanged" : {
		"new" : {},
		"next":"shrinkOrGrow",
		"shrink" :{"replace" : {"dialogueRandom":[":shrinking"]}},
		"grow" :{"replace" : {"dialogueRandom":[":growing"]}}
	},
	// when stepping on a character small enough
	"didSteppy" : {
		"new" : {"dialogueRandom":[":didSteppy"]}
	},

	// when stepped on by a larger character
	"gotSteppy" : {
		"new" : {"dialogueRandom":[":gotStepped"]},
		"next" : "steppyType",
		"falling" :{"replace" : {"dialogueRandom":[":gotStomped"]}}
	}
}
