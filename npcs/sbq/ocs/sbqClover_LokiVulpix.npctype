{
	"type" : "sbqClover_LokiVulpix",
	"baseType" : "villager",

	"scripts" : [
		"/npcs/bmain.lua",
		"/scripts/npc/SBQ_npc_bmain.lua",
		"/scripts/npc/SBQ_vore_npc.lua"
	],

	// you really should make sure to define the npcname so the OC actually has the OC's name
	"npcname" : "Clover",
	// identity is quite important if you don't want things to be randomly generated
	// great thing here is one can define whatever they want as the name of the hair, facial hair, or facial mask types, even if they're not
	// available to the player in normal customization it just has to be in the folder with the rest of the hairs for the species
	// if one knows how to make a directives string too, they can just define it here for the specific parts
	"identity" : {
		"gender" : "male"
		/*
		"hairType" : "0",
		"facialHairType" : "",
		"facialMaskType" : "",

		"hairDirectives" : "",
		"facialHairDirectives" : "",
		"facialMaskDirectives" : "",
		"emoteDirectives" : "",
		"bodyDirectives" : "",


		"personalityArmIdle" : "idle.2",
		"personalityIdle" : "idle.2",
		*/
	},
	"scriptConfig" : {
		"sbqNPC" : true,

		// these remove access to the settings panels for pred and prey respectively
		// "isPredator" : false,
		"isPrey" : false,

		"isOC" : true, // this is just for scripts to identify this NPC as an OC and for some specific behavior relating to that
		"behavior" : "sbqvorevillager",
		"questGenerator" : {
			"pools" : ["sbq_common", "sbq_transform", "sbq_vore", "tenant"],
			"graduation" : {
				"nextNpcType" : [] // this prevents the NPC from graduating into crew
			}
		},
		"sbqConvertType" : false,


		//"uniqueId" : "sbqClover_LokiVulpix", // the unique ID for the NPC, used for other NPCs that may want to detect this specific one, and to prevent multiple instances of the same character appearing on one planet

		"tenantBio" : { "type" : "layout", "mode" : "h", "children" : [
			{ "type" : "image", "scale" : 0.75, "file" : "/humanoid/sbqClover_LokiVulpix/portraits/CNeutral.png" },
			{ "type" : "scrollArea", "thumbScrolling" : true, "scrollBars" : true, "scrollDirections" : [0, 1], "children" : [
				{ "mode" : "vertical" },
				[ { "type" : "label", "text" : "Age: 21"}, { "type" : "label", "text" : "Gender: ^#FCF434;N^#FFFFFF;o^#9C59D1;n^#FFFFFF;b^#FCF434;i^#FFFFFF;n^#9C59D1;a^#FFFFFF;r^#FCF434;y"} ],
				[ { "type" : "label", "text" : "Pronouns: They/Them/He"}, { "type" : "label", "text" : "Species: Meowscarada"} ],
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "A mystery..."},
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "Favorites: Hammerspace, Compression, Cock TF, Cock Vore"}
			] }
		]},

		//"dialogueStepScripts" : ["/npcs/sbq/ocs/sbqClover_LokiVulpixdialogueStepScripts.lua"], // this is for scripts used by both the dialogue box and the NPC itself, used for adding extra behavior step scripts to the dialogue tree
		// as the scripts here are being called on both a UI and on the NPC, do avoid using the player or npc lua tables in such scripts unless said script would only trigger in the context of it having said table

		//"dialogueTree" : "/npcs/sbq/sbqVoreVillager.npctype:scriptConfig.dialogueTree", // if one wants to just use the default random gen NPC dialogue tree, one can just delete the table and uncomment this
		"dialogueTree" : {
			"dialogueFile" : "/npcs/sbq/ocs/sbqClover_LokiVulpix.dialogue",
			// after following a path, next steps will automatically advance down the tree building the result dialogue

			// overall default values for a "new" dialogue
			"defaultResults" : {
				"dialogueRandom" : [":missingDialogue"],
				"jump" : ".greeting" // if a part of the dialogue tree goes to a part that has no data for continuation via the button it will jump to which one of these it saw last while moving down the tree
			},
			// greeting is the default start of the tree
			// settings come from itself
			"greeting" : {
				"new" : {"jump" : ".greeting"},
				"next" : "giveRewards",
				"rewards" : {
					"replace" : {"dialogueRandom" : ["greetingRewards"]},
					"next" : ["introduced"],
					"true" : {
						"replace" : {"dialogueRandom" : ["greetingRewardsIntroduced"]}
					}
				},
				"default" : {
					"next" : ["isOwner"],
					"replace" : {"dialogueRandom" : [":greeting"]},
					"true" : {
						"next" : ["isFollowing"],
						"replace" : {
							"dialogueRandom" : [":greetingCrew"],
							"buttonText" : ["Stay"],
							"callScript" : "swapFollowing"
						},
						"false" : { "replace" : {"buttonText": ["Follow"]}}
					}
				},
				"stay" : {
					"new" : {
						"dialogueRandom" : ["crewStay"]
					}
				},
				"follow" : {
					"new" : {
						"dialogueRandom" : ["crewFollow"]
					}
				},
				"fullCrew" : {
					"new" : {"dialogueRandom" : [":fullCrew"]}
				}
			},
			// lines triggered when a player may recieve a certain reward
			"rewardNotify" :{
				"new" : {},
				"next" : ["poolName", "rewardName"],
				"money" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMoney"]}
				},
				"lowValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyLowValueQuestRewards"]}
				},
				"mediumValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMediumValueQuestRewards"]}
				},
				"highValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyHighValueQuestRewards"]}
				}
			},

			// lines for when a pred is eating prey, be it from hunting, or from it being requested
			// settings come from itself
			"vore" : {
				"new" : {
					"delay" : 1.5,
					"dismissTime" : 3,
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "voreType",
				"oralVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":oralVoreRequestBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":oralVoreRequestAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":oralVoreNoPrompt"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":oralVoreNoPromptAfter"]}
						}
					},
					"prompt" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":oralVorePrompt"],
							"buttonText" : [":ynPrompt"],
							"options" : [
								["Yes!", ".oralVore.prompt.response.yes" ],
								["No.", ".oralVore.prompt.response.no" ],
								["No... ^#555;(But actually Yes)", ".oralVore.prompt.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":oralVorePromptYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":oralVorePromptYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":oralVorePromptNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":oralVorePromptNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":oralVorePromptNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : ["notFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : ["tooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : ["tooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":oralVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":oralVoreDigestFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":oralVoreCompressionFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : ["full"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : ["needsInfusion"]}
					}
				},
				"cockVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":cockVoreRequestBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":cockVoreRequestAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":cockVoreNoPrompt"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":cockVoreNoPromptAfter"]}
						}
					},
					"prompt" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":cockVorePrompt"],
							"buttonText" : [":ynPrompt"],
							"options" : [
								["Yes!", ".cockVore.prompt.response.yes" ],
								["No.", ".cockVore.prompt.response.no" ],
								["No... ^#555;(But actually Yes)", ".cockVore.prompt.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":cockVorePromptYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":cockVorePromptYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":cockVorePromptNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":cockVorePromptNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":cockVorePromptNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : ["notFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : ["tooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : ["tooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":cockVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":cockVoreDigestFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":cockVoreCompressionFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : ["full"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : ["needsInfusion"]}
					}
				}
			},

			// when being pred, responses to the prey struggling inside
			// settings come from itself, prey settings come from prey
			"struggle" : {
				"new" : {
					"hideVoreButtons" : true,
					"dialogueRandom" : ["struggle"]
				},
				"next" : "location",
				"any" : {
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":transformingStruggle"]},
						"addQueued" : true,
						"next" : "transformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":transformingStruggleImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":eggifyStruggle"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":eggifyStruggleImmune"]}}
					}}
				},
				"taurBelly" : ".belly",
				"belly" : {
					"replace" : {
						"dialogueRandom" : ["struggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestStruggle"]},
							"next" : "digestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":digestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":healStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":compressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":energyDrainStruggle"]}}},
					"transforming" : ".struggle.any.transforming",
					"eggify" : ".struggle.any.eggify"
				},
				"cock" : ".shaft",
				"shaft" : {
					"replace" : {
						"dialogueRandom" : [":shaftStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming",
						"locationInfused"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":shaftDigestStruggle"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":shaftDigestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":shaftHealStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":shaftCompressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":shaftEnergyDrainStruggle"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":cumTransformingStruggle"]},
						"addQueued" : true,
						"next" : "cumTransformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":cumTransformingStruggleImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":eggifyStruggle"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":eggifyStruggleImmune"]}}
					}},
					"locationInfused" : {
						"true" : {
							"add" : { "dialogueRandom" : [":shaftInfusedStruggle"]}
						}
					}
				},
				"ballsL" : ".balls",
				"ballsR" : ".balls",
				"balls" : {
					"replace" : {
						"dialogueRandom" : [":ballsStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":ballsDigestStruggle"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":ballsDigestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":ballsHealStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":ballsCompressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":ballsEnergyDrainStruggle"]}}},
					"transforming" : ".struggle.any.transforming",
					"eggify" : ".struggle.any.eggify"
				}
			},

			// when being pred, responses to the prey escaping
			// settings come from itself, prey settings come from the prey
			"letout" : {
				"next" : "struggleTrigger",
				"true" : { // prey struggled out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleTransforming"]},
							"addQueued" : true,
							"next" : ["transformAllow"],
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":oralVoreLetoutStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":oralVoreLetoutStruggleDigested"]
								},
								"finished" : true

							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":oralVoreLetoutStruggleDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":oralVoreLetoutStruggleDigestImmune"]}
								}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":oralVoreLetoutStruggleSoftDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":oralVoreLetoutStruggleDigestImmune"]}
								}
							},
							"heal" : {
								"replace" : {"dialogueRandom" : [":oralVoreLetoutStruggleHeal"]}
							}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":cockVoreLetoutStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":cockVoreLetoutStruggleDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":cockVoreLetoutStruggleDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":cockVoreLetoutStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":cockVoreLetoutStruggleSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":cockVoreLetoutStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":cockVoreLetoutStruggleHeal"]}}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					}
				},
				"false" : { // pred let prey out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutTransforming"]},
							"addQueued" : true,
							"next" : "transformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":oralVoreLetout"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":oralVoreLetoutDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":oralVoreLetoutDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":oralVoreLetoutDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":oralVoreLetoutSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":oralVoreLetoutDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":oralVoreLetoutHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"

					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":cockVoreLetout"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":cockVoreLetoutDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":cockVoreLetoutDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":cockVoreLetoutDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":cockVoreLetoutSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":cockVoreLetoutDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":cockVoreLetoutHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"
					}
				}
			},

			// for when an NPC is requesting a player or other NPC eats them
			"requesting" : {
				"new" : { "dialogueRandom" : [":error"]}
			},
			// for when being prey and forcing their way into a pred without asking
			"Forcing" : {
				"new" : { "dialogueRandom" : [":error"]}
			},
			// when being pred, response to prey forcing their way in unwillingly
			"Forced" : {
				"new" : {},
				"next" : "voreType",
				"oralVore" : {
					"replace" : { "dialogueRandom" : [":oralVoreForced"]}
				},
				"cockVore" : {
					"replace" : { "dialogueRandom" : [":cockVoreForced"]}
				}
			},

			// when being prey, responses to the pred that ate them as they struggle
			// settings come from the pred, prey settings comes from itself
			"struggling" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// when being prey, responses to the pred thats eating them
			// settings come from the pred, prey settings comes from itself
			"vored" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// when being prey, responses to the pred letting them out
			// settings come from the pred, prey settings comes from itself
			"escape" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// lines for when an NPC infuses someone (CTF, Boobsorb, etc.)
			"infusePrey" : {
				"new" : {"dismissTime" : 2},
				"next" : "location",
				"cock" : ".shaft",
				"shaft" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseRequestShaftBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestShaftBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseRequestShaftAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestShaftAfterLayer"]}}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseNoPromptShaftBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseNoPromptShaftBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseNoPromptShaftAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseNoPromptShaftAfterLayer"]}}
						}
					},
					"notFeelingIt" : { "replace" : {"dialogueRandom" : ["notFeelingIt"]} }

				},
				"ballsL" : ".balls",
				"ballsR" : ".balls",
				"balls" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseRequestBallsBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestBallsBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseRequestBallsAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestBallsAfterLayer"]}}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseNoPromptBallsBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseNoPromptBallsBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseNoPromptBallsAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseNoPromptBallsAfterLayer"]}}
						}
					},
					"notFeelingIt" : { "replace" : {"dialogueRandom" : ["notFeelingIt"]} }
				}
			},

			// lines for when a character is infused (CTF Boobsorb etc.)
			// settings for personality and race and mood would come from the infused character, things like location effect and etc would come from the pred
			"infused" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// lines for when a character is infused (CTF Boobsorb etc.) the pred teasing their occupant
			// the <infusedName> tag can also be used in any of the above vore context to use the name of the infused character, just make sure to have the lines within a special check for it
			"teaseInfused" : {
				"new" : {
					"dialogueRandom":[":teaseInfused"],
					"hideVoreButtons" : true
				},
				"next" : "location",
				"cock":".shaft",
				"shaft" : {"replace" :{"dialogueRandom" : [":teaseInfusedShaft"]}},
				"ballsL":".balls",
				"ballsR":".balls",
				"balls" : {"replace" :{"dialogueRandom" : [":teaseInfusedBalls"]}}
			},

			//lines of dialogue triggered when the horny meter hits 100% (the NPC climaxes)
			"climax" : {
				"new" : {
					"dialogueRandom":[":climax"],
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "location",
				"pussy":".womb",
				"womb" : {"replace" :{"dialogueRandom" : [":climaxWomb"]}},
				"breasts" : {"replace" :{"dialogueRandom" : [":climaxBreasts"]}},
				"cock":".shaft",
				"shaft" : {"replace" :{"dialogueRandom" : [":climaxShaft"]}},
				"ballsL":".balls",
				"ballsR":".balls",
				"balls" : {"replace" :{"dialogueRandom" : [":climaxBalls"]}}
			},

			// a line of dialogue triggered when size is changed by the size ray or something else
			"sizeChanged" : {
				"new" : {},
				"next":"shrinkOrGrow",
				"shrink" :{"replace" : {"dialogueRandom":[":shrinking"]}},
				"grow" :{"replace" : {"dialogueRandom":[":growing"]}}
			},
			// when stepping on a character small enough
			"didSteppy" : {
				"new" : {"dialogueRandom":[":didSteppy"]}
			},

			// when stepped on by a larger character
			"gotSteppy" : {
				"new" : {"dialogueRandom":[":gotStepped"]},
				"next" : "steppyType",
				"falling" :{"replace" : {"dialogueRandom":[":gotStomped"]}}
			}
		},
		"voreConfig" : {
			// the default settings loaded when things have not been configured yet, also used as a fallback if a setting happens to be set to an invalid value
			"defaultSettings" : {
				"pussy" : true,
				"cock" : true,

				"locations" : {
					"womb" : {
						"mainEffect" : "heal",
						"hammerspace" : true
					},
					"pussy" : {
						"mainEffect" : "heal",
						"hammerspace" : true
					},
					"tail" : {
						"mainEffect" : "softDigest",
						"hammerspace" : true
					},
					"belly" : {
						"mainEffect" : "softDigest",
						"hammerspace" : true
					},
					"balls" : {
						"mainEffect" : "softDigest",
						"hammerspace" : true
					},
					"cock" : {
						"hammerspace" : true
					}
				}
			},
			// override settings, for settings you don't want the player to be able to configure, such as if you don't like certain kinks, you can disable them on your NPC, or require something to stay enabled
			"overrideSettings" : {
				"breasts" : false,
				"infusePrefs" : {
					"pawInfuse" : {
						"prey" : false
					}
				},
				"vorePrefs" : {
					"navelVore" : {
						"pred" : false,
						"prey" : false
					},
					"absorbVore" : {
						"pred" : false
					},
					"breastVore" : {
						"pred" : false
					}
				},
				"locations" : {
					"cock" : {
						"mainEffect" : "none"
					},
					"ass" : {
						"mainEffect" : "none"
					}
				},
				"acidDigestFatal" : false,
				"cumDigestFatal" : false,
				"milkDigestFatal" : false,
				"femcumDigestFatal" : false,
				"femcumDigestDrops" : false,

				"speciesTF" : false,
				"genderTF" : false
			},
			"invalidSettings" : {
				"mainEffect" : {
					"digest" : "softDigest"
				}
			}
		},

		// rewards given to the player for doing things for the pred are here! cumulative ones accumulate time between different sessions, otherwise it only counts up per the current session
		// you can make a reward take both per session time as well as cumulative time!
		"sbqPredRewards" : {
			// Time is in minutes here!
			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 0, "pool" : "money" },

			"hour1" : { "time" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3" : { "time" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours
			"day" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"struggleReward1" : { "repeatable" : true, "struggles" : 50, "minStruggles" : 0, "pool" : "money" },

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"dayCumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"weekCumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		},
		// rewards given to the player for doing things for their prey are here! cumulative ones accumulate time between different sessions, otherwise it only counts up per the current session
		// you can make a reward take both per session time as well as cumulative time!
		// reward args are the same as for the pred reward table, but are for the prey being inside you
		"sbqPreyRewards" : {
			// Time is in minutes here!
			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 10, "pool" : "money" },

			"hour3" : { "time" : 180, "pool" : "lowValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"digestedReward1" : { "repeatable" : true, "timesDigested" : 1, "pool" : "money"},
			"digestedReward2" : { "repeatable" : true, "timesDigested" : 5, "pool" : "lowValueQuestRewards"},

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1Cumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"week1Cumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		},


		// the args below are for randomizing specific settings between possible values in the table when the pred is first summoned, a few examples have been defined
		// specific OCs will probably have specific prefrences in mind, so you may not want things to randomize at all

		"sbqRandomizeSettings" : {

			"bellyEffectSlot" : [ "none", "heal", "softDigest"],
			"ballsEffectSlot" : [ "none", "heal", "softDigest"],
			"ballsInfusedItem" : "shaftInfusedItem",
			"shaftInfusedItem" : [{ "name": "sbqNPCEssenceJar", "count": 1, "parameters": {
				"shortdescription" : "Cherry's Essence",
				"description" : "Clover's \"Assistant\" looks like all she's doing right now is twitching between his legs~",
				"preySize" : 1,
				"npcArgs" : {
					"npcSpecies" : "meowscarada",
					"npcType" : "sbqCherry_LokiVulpix",
					"npcParam" : {
						"scriptConfig" : {
							"isOC" : true,
							"uniqueId" : "sbqCherry_LokiVulpix"
						},
						"identity" : {
							"body" : "5",
							"arm" : "3",
							"facialHairType" : "0",
							"facialHairGroup" : "ears",
							"hairType" : "0",
							"bodyDirectives" : "?replace;aaccc0=ccaab5fe;882c4a=882c4a;c2cfcb=cfc2c6fe;65deb5=df658efe;b9446b=b9446b;df658e=df658e;44b992=b9446bfe?replace;265529=b9549b;1a2617=65133a;23311f=721e46;2d6231=cc69af;131c10=5a062f;1c421e=a93c89?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb",
							"personalityArmIdle" : "idle.3",
							"gender" : "female",
							"hairGroup" : "hair",
							"facialMaskDirectives" : "?replace;aaccc0=ccaab5fe;882c4a=882c4a;c2cfcb=cfc2c6fe;65deb5=df658efe;b9446b=b9446b;df658e=df658e;44b992=b9446bfe?replace;265529=b9549b;1a2617=65133a;23311f=721e46;2d6231=cc69af;131c10=5a062f;1c421e=a93c89?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb",
							"personalityIdle" : "idle.5",
							"name" : "Cherry",
							"facialMaskGroup" : "mask",
							"facialHairDirectives" : "?replace;265529=b9549b;1a2617=65133a;23311f=721e46;2d6231=cc69af;131c10=5a062f;1c421e=a93c89?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb",
							"imagePath" : "meowscarada",
							"emoteDirectives" : "?replace;aaccc0=ccaab5fe;882c4a=882c4a;c2cfcb=cfc2c6fe;65deb5=df658efe;b9446b=b9446b;df658e=df658e;44b992=b9446bfe?replace;265529=b9549b;1a2617=65133a;23311f=721e46;2d6231=cc69af;131c10=5a062f;1c421e=a93c89?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb",
							"hairDirectives" : "?replace;265529=b9549b;1a2617=65133a;23311f=721e46;2d6231=cc69af;131c10=5a062f;1c421e=a93c89?replace;c3daa5=f5bad8;ddf2bf=ffd7eb;e9fcce=ffe2f0;a0b686=eda7cb",
							"facialMaskType" : "blank"
						}
					}
				}
			}}]

		}
		/*
		"sbqRandomizePreySettings" : {
			"oralVore" : [true,false]
		},
		*/
	},
	"statusControllerSettings" : {
		"stats" : {
			"maxEnergy" : {
				"baseValue" : 100.0
			},
			"energyRegenPercentageRate" : {
				"baseValue" : 0.585  // 1.75 second recharge time (STABLE)
				// "baseValue" : 0.5    // 2 second recharge time
				// "baseValue" : 0.45      // 2.25 second recharge time
				// "baseValue" : 0.4     // 2.5 second recharge time
			},
			"foodDelta" : {
				"baseValue" : -0.0583 // -70 food over 20 minutes
			},
			"sbqLustScriptMax" : {
				"baseValue" : 0.5
			},
			"sbqLustScriptDelta" : {
				"baseValue" : 0.0583
			},
			"sbqLustDelta" : {
				"baseValue" : 0
			},
			"sbqRestScriptDelta" : {
				"baseValue" : -0.0583
			},
			"sbqRestDelta" : {
				"baseValue" : 0
			}
		},
		"resources" : {
			"food" : {
				"deltaStat" : "foodDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 70
			},
			"sbqLust" : {
				"deltaStat" : "sbqLustDelta",
				"initialPercentage" : 0.0,
				"maxValue" : 100
			},
			"sbqRest" : {
				"deltaStat" : "sbqRestDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 100
			}
		},
		"statusProperties" : {
			"sbqDidVornyConvertCheck" : true
		}
	},
	"items" : {
		"override" : [
			[0,
				[
					{
						"headCosmetic" : [{
							"name" : "sbqClover_LokiVulpix_head",
							"count" : 1
						}],
						"legsCosmetic" : [{
							"parameters" : {
								"directives" : "?replace;383838=00000000;b5b5b5=00000000;838383=00000000;b6b6b6=00000000;e6e6e6=00000000?replace;ffca8a=96cbe7;e0975c=5588d4;a85636=344495;6f2919=1a1c51",
								"colorIndex" : 0
							},
							"name" : "jeans1legs",
							"count" : 1
						}]

					}
				]
			]
		]
	}

}
