{
	"type" : "sbqAkari_AkariKaen",
	"baseType" : "villager",

	"scripts" : [
		"/npcs/bmain.lua",
		"/scripts/npc/SBQ_npc_bmain.lua",
		"/scripts/npc/SBQ_vore_npc.lua"
	],

	// you really should make sure to define the npcname so the OC actually has the OC's name
	"npcname" : "Akari",
	// identity is quite important if you don't want things to be randomly generated
	// great thing here is one can define whatever they want as the name of the hair, facial hair, or facial mask types, even if they're not
	// available to the player in normal customization it just has to be in the folder with the rest of the hairs for the species
	// if one knows how to make a directives string too, they can just define it here for the specific parts
	"identity" : {
		"gender" : "male",
		"personalityArmIdle" : "idle.2",
		"personalityIdle" : "idle.2"
	},
	"scriptConfig" : {
		"sbqNPC" : true,

		// these remove access to the settings panels for pred and prey respectively
		// "isPredator" : false,
		// "isPrey" : false,

		"isOC" : true, // this is just for scripts to identify this NPC as an OC and for some specific behavior relating to that
		"behavior" : "sbqvorevillager",
		"questGenerator" : {
			"pools" : ["sbq_common", "sbq_transform", "sbq_vore", "tenant"],
			"graduation" : {
				"nextNpcType" : [] // this prevents the NPC from graduating into crew
			}
		},
		"likesSteppy" : true,

		"tenantBio" : { "type" : "layout", "mode" : "h", "children" : [
			//{ "type" : "image", "scale" : 0.75, "file" : "/humanoid/sbqAkari_AkariKaen/portraits/ANeutral.png" },
			{ "type" : "scrollArea", "thumbScrolling" : true, "scrollBars" : true, "scrollDirections" : [0, 1], "children" : [
				{ "mode" : "vertical" },
				[ { "type" : "label", "text" : "Age: 22"}, { "type" : "label", "text" : "Gender: male"} ],
				[ { "type" : "label", "text" : "Pronouns: He/Him"}, { "type" : "label", "text" : "Species: Southern sergal"} ],
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "Akari is from the planet Tal and grew up in the walls of the major city Gold Ring, he mostly work as an guard or an city police and later becoming an Agent so he got to experience and witness to many things...like when he had to rescue the king's daughter from a cult, though he was always interested in the wonders of the micro world...oh and has a weakness for paws, mostly those that are bigger than him"},
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "Favorites: Being a Micro, Paws, inanimate tf, OV, CV, being a micro prey"}
			]}
		]},
		"sbqConvertType" : false,

		"uniqueId" : "sbqAkari_AkariKaen", // the unique ID for the NPC, used for other NPCs that may want to detect this specific one, and to prevent multiple instances of the same character appearing on one planet
		"entityPortrait" : true, // set this to true of you want the dialogue box portrait to use the entity's portrait
		"defaultPortrait" : "bust",
		// if you want to use specially drawn sprites for dialogue box portraits, remove the two portrait args above, and uncomment the args below
		/*
		"defaultPortrait" : "Neutral.png",
		"portraitPath" : "/humanoid/sbqAkari_AkariKaen/portraits/A", // Depending on how you make your OC, you may want to have your portraits located in different places, so heres some suggestions
		*/

		//"dialogueStepScripts" : ["/npcs/sbq/ocs/sbqAkari_AkariKaendialogueStepScripts.lua"], // this is for scripts used by both the dialogue box and the NPC itself, used for adding extra behavior step scripts to the dialogue tree
		// as the scripts here are being called on both a UI and on the NPC, do avoid using the player or npc lua tables in such scripts unless said script would only trigger in the context of it having said table

		//"dialogueTree" : "/npcs/sbq/sbqVoreVillager.npctype:scriptConfig.dialogueTree", // if one wants to just use the default random gen NPC dialogue tree, one can just delete the table and uncomment this
		"dialogueTree" : {
			"dialogueFile" : "/npcs/sbq/ocs/sbqAkari_AkariKaen.dialogue",
			// after following a path, next steps will automatically advance down the tree building the result dialogue

			// overall default values for a "new" dialogue
			"default" : {
				"dialogueRandom" : [":missingDialogue"],
				"jump" : ".converse" // if a part of the dialogue tree goes to a part that has no data for continuation via the button it will jump to which one of these it saw last while moving down the tree
			},
			// greeting is the default start of the tree
			// settings come from itself
			"greeting" : {
				"new" : {"jump" : ".converse"},
				"next" : "giveRewards",
				"rewards" : {
					"replace" : {"dialogueRandom" : [":defaultRewardsGreeting"]},
					"next" : ["introduced"],
					"true" : {
						"replace" : {"dialogueRandom" : [":defaultRewardsGreetingIntroduced"]}
					}
				},
				"default" : {
					"next" : ["isOwner"],
					"replace" : {"dialogueRandom" : [":defaultGreeting"]},
					"true" : {
						"replace" : {
							"dialogueRandom" : [":defaultGreetingCrew"]
						}
					}
				}
			},
			"converse" : {
				"new" : {
					"dialogueRandom" : [":converse"],
					"buttonText" : ["[Options]"],
					"options" : [
						[ "My name is...", ".introduce", {"check" : {"introduced" : false}}]
					]
				},
				"next" : ["isOwner", "otherOptions"],
				"true" : {
					"addQueued" : true,
					"queueReplace" : {
						"options" : [
							["Stay", ["swapFollowing"]]
						]
					},
					"next" : ["isFollowing"],
					"false" : {
						"queueReplace" : {
							"options" : [
								["Follow", ["swapFollowing"]]
							]
						}
					}
				},
				"otherOptions" : {
					"add" : {
						"options" : [
							[ "Tell me more about you", ".talkAboutSelf"]
						]
					}
				},
				"stay" : {
					"new" : {
						"dialogueRandom" : [":defaultCrewStay"],
						"jump" : ".converse"
					}
				},
				"follow" : {
					"new" : {
						"dialogueRandom" : [":defaultCrewFollow"],
						"jump" : ".converse"
					}
				},
				"fullCrew" : {
					"new" : {
						"dialogueRandom" : [":fullCrew"],
						"jump" : ".converse"
					}
				},
				"introduce" :{
					"new" : {
						"playerSaveSettings" : { "introduced" : true },
						"dialogue" : ":introduce",
						"jump" : ".converse"
					}
				}
			},
			"talkAboutSelf" : {
				"new" : {
					"dialogueRandom" : [":talkAboutSelf"],
					"buttonText" : ["[Options]"],
					"options" : [
						["What Are You?", ".whatAreYou"],
						["Why do you guys say \"merp\" A lot?", ".merp"],
						["* say a cheese joke", ".cheeseJoke"],
						["what are you into?", ".talkAboutKinks"],
						["<-", ".converse" ]
					]
				},
				"whatAreYou" : {
					"new" : {
						"dialogue" : ":talkAboutSelfWhatAreYou",
						"jump" : ".talkAboutSelf"
					}
				},
				"merp" : {
					"new" : {
						"dialogue" : ":talkAboutSelfWhyMerp",
						"jump" : ".talkAboutSelf"
					}
				},
				"cheeseJoke" : {
					"new" : {
						"dialogue" : ":talkAboutSelfCheeseJoke",
						"jump" : ".talkAboutSelf"
					}
				},
				"talkAboutKinks" : {
					"new" : {
						"dialogue" : ":talkAboutSelfKinks",
						"jump" : ".talkAboutKinks"
					}
				}
			},
			"talkAboutKinks" : {
				"new" : {
					"buttonText" : ["[Options]"],
					"dialogueRandom" : [":talkAboutKinks"],
					"options" : [
						["Macro and Micro", ".macroMicro"],
						["Paws", ".paws"],
						["vore", ".vore"],
						["<-", ".converse" ]
					]
				},
				"macroMicro" : {
					"new" : {
						"dialogue" : ":talkAboutKinksMacroMicro",
						"jump" : ".talkAboutKinks"
					}
				},
				"paws" : {
					"new" : {
						"dialogue" : ":talkAboutKinksPaws",
						"jump" : ".talkAboutKinks"
					}
				},
				"vore" : {
					"new" : {
						"dialogue" : ":talkAboutKinksVore",
						"jump" : ".talkAboutKinks"
					}
				}
			},


			// lines triggered when a player may recieve a certain reward
			"rewardNotify" :{
				"new" : {},
				"next" : ["poolName", "rewardName"],
				"money" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMoney"]}
				},
				"lowValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyLowValueQuestRewards"]}
				},
				"mediumValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMediumValueQuestRewards"]}
				},
				"highValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyHighValueQuestRewards"]}
				}
			},

			// lines for when a pred is eating prey, be it from hunting, or from it being requested
			// settings come from itself
			"vore" : {
				"new" : {
					"delay" : 1.5,
					"dismissTime" : 3,
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "voreType",
				"oralVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultRequestOralVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultRequestOralVoreAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedOralVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedOralVoreAfter"]}
						}
					},
					"selfRequest" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":defaultSelfRequestOralVore"],
							"buttonText" : ["[Y/N]"],
							"options" : [
								["Yes!", ".oralVore.selfRequest.response.yes" ],
								["No.", ".oralVore.selfRequest.response.no" ],
								["No... ^#555;(But actually Yes)", ".oralVore.selfRequest.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestOralVoreYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestOralVoreNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : [":defaultNotFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : [":defaultTooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : [":defaultTooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":defaultOralVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestOralVoreFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":compressionOralVoreFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : [":defaultFull"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : [":defaultNeedsInfusion"]}
					}
				},
				"cockVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultRequestCockVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultRequestCockVoreAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedCockVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedCockVoreAfter"]}
						}
					},
					"selfRequest" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":defaultSelfRequestCockVore"],
							"buttonText" : ["[Y/N]"],
							"options" : [
								["Yes!", ".cockVore.selfRequest.response.yes" ],
								["No.", ".cockVore.selfRequest.response.no" ],
								["No... ^#555;(But actually Yes)", ".cockVore.selfRequest.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestCockVoreYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestCockVoreYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestCockVoreNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestCockVoreNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestCockVoreNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : [":defaultCockVoreNotFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : [":defaultCockVoreTooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : [":defaultTooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":defaultCockVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestCockVoreFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":compressionCockVoreFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : [":defaultFull"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : [":defaultNeedsInfusion"]}
					}
				}
			},

			// when being pred, responses to the prey struggling inside
			// settings come from itself, prey settings come from prey
			"struggle" : {
				"new" : {
					"hideVoreButtons" : true,
					"dialogueRandom" : [":defaultStruggle"]
				},
				"next" : "location",
				"any" : {
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":error"]},
						"addQueued" : true
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":error"]},
						"addQueued" : true
					}}
				},
				"taurBelly" : ".belly",
				"belly" : {
					"replace" : {
						"dialogueRandom" : [":defaultStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestStruggle"]},
							"next" : "digestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":digestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":healStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":compressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":energyDrainStruggle"]}}},
					"transforming" : ".struggle.any.transforming",
					"eggify" : ".struggle.any.eggify"
				},
				"cock" : ".shaft",
				"shaft" : {
					"replace" : {
						"dialogueRandom" : [":shaftDefaultStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming",
						"locationInfused"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":shaftDigestStruggle"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":shaftDigestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":shaftHealStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":shaftCompressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":shaftEnergyDrainStruggle"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":error"]},
						"addQueued" : true
					}},
					"eggify" : ".struggle.any.eggify",
					"locationInfused" : {
						"true" : {
							"add" : { "dialogueRandom" : [":shaftInfusedStruggle"]}
						}
					}
				},
				"ballsL" : ".balls",
				"ballsR" : ".balls",
				"balls" : {
					"replace" : {
						"dialogueRandom" : [":ballsDefaultStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":ballsDigestStruggle"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":ballsDigestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":ballsHealStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":ballsCompressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":ballsEnergyDrainStruggle"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":error"]},
						"addQueued" : true
					}},
					"eggify" : ".struggle.any.eggify"
				}
			},

			// when being pred, responses to the prey escaping
			// settings come from itself, prey settings come from the prey
			"letout" : {
				"next" : "struggleTrigger",
				"true" : { // prey struggled out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleTransforming"]},
							"addQueued" : true,
							"next" : ["transformAllow"],
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutOralVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutOralVoreStruggleDigested"]
								},
								"finished" : true

							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleDigestImmune"]}
								}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleSoftDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleSoftDigestImmune"]}
								}
							},
							"heal" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleHeal"]}
							}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutCockVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutCockVoreStruggleDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutCockVoreStruggleDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutCockVoreStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutCockVoreStruggleSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutCockVoreStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutCockVoreStruggleHeal"]}}
						},
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleCumTransforming"]},
							"addQueued" : true,
							"next" : ["cumTransformAllow"],
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleCumTransformingImmune"]}}
						}},
						"eggify" : ".letout.true.any.eggify"
					}
				},
				"false" : { // pred let prey out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutTransforming"]},
							"addQueued" : true,
							"next" : "transformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutOralVore"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutOralVoreDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutOralVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutOralVoreSoftDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutOralVoreHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"

					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutCockVore"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutCockVoreDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutCockVoreDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutCockVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutCockVoreSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutCockVoreDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutCockVoreHeal"]}}
						},
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutCumTransforming"]},
							"addQueued" : true,
							"next" : "cumTransformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutCumTransformingImmune"]}}
						}},
						"eggify" : ".letout.false.any.eggify"
					}
				}
			},

			// for when an NPC is requesting a player or other NPC eats them
			"preyRequest" : {
				"next" : "voreType",
				"new" : {
					"dismissTime" : 30,
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"oralVore" : {
					"replace" : {
						"dialogueRandom" : [":defaultPreyRequestOralVore"],
						"buttonText" : ["[Y/N]"],
						"options" : [
							["Yes!", ".oralVore.response.yes" ],
							["No.", ".oralVore.response.no" ],
							["No... ^#555;(But actually Yes)", ".oralVore.response.noYes" ]
						]
					},
					"seperateNext" : true,
					"response" : {
						"yes" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestOralVoreYes"],
								"dismissTime" :2
							},
							"next" : ["queuePrey"]
						},
						"no" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestOralVoreNo"],
								"dismissTime" :2
							}
						},
						"noYes" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestOralVoreNoYes"],
								"dismissTime" :2
							},
							"next" : ["queuePrey"]
						}
					}
				},
				"cockVore" : {
					"replace" : {
						"dialogueRandom" : [":defaultPreyRequestCockVore"],
						"buttonText" : ["[Y/N]"],
						"options" : [
							["Yes!", ".cockVore.response.yes" ],
							["No.", ".cockVore.response.no" ],
							["No... ^#555;(But actually Yes)", ".cockVore.response.noYes" ]
						]
					},
					"seperateNext" : true,
					"response" : {
						"yes" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestCockVoreYes"],
								"dismissTime" :2
							},
							"next" : ["queuePrey"]
						},
						"no" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestCockVoreNo"],
								"dismissTime" :2
							}
						},
						"noYes" : {
							"new" : {
								"dialogueRandom" : [":defaultPreyRequestCockVoreNoYes"],
								"dismissTime" :2
							},
							"next" : ["queuePrey"]
						}
					}
				}
			},
			// for when being prey and forcing their way into a pred without asking
			"forcingPrey" : {
				"new" : {},
				"next" : "voreType",
				"oralVore" : {
					"replace" : { "dialogueRandom" : [":defaultForcingPreyOralVore"]}
				},
				"cockVore" : {
					"replace" : { "dialogueRandom" : [":defaultForcingPreyCockVore"]}
				}
			},
			// when being pred, response to prey forcing their way in unwillingly
			"unwillingPred" : {
				"new" : {},
				"next" : "voreType",
				"oralVore" : {
					"replace" : { "dialogueRandom" : [":defaultUnwillingPredOralVore"]}
				},
				"cockVore" : {
					"replace" : { "dialogueRandom" : [":defaultUnwillingPredCockVore"]}
				}
			},

			// when being prey, responses to the pred that ate them as they struggle
			// settings come from the pred, prey settings comes from itself
			"struggling" : {
				"new" : {
					"hideVoreButtons" : true,
					"dialogueRandom" : [":struggling"]
				},
				"next" : ["predator","location"],
				"taurBelly" : ".belly",
				"belly" : {
					"replace" : {
						"dialogueRandom" : [":strugglingBelly"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":strugglingBellyDigest"]},
							"next" : "digestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":strugglingBellyDigestImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":strugglingBellyHeal"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":strugglingBellyCompression"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":strugglingBellyEnergyDrain"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingBellyTransforming"]},
						"addQueued" : true,
						"next" : "transformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingTransformingImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingBellyEggify"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingEggifyImmune"]}}
					}}
				},
				"cock" : ".shaft",
				"shaft" : {
					"replace" : {
						"dialogueRandom" : [":strugglingShaft"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":strugglingShaftDigest"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":strugglingShaftDigestImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":strugglingShaftHeal"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":strugglingShaftCompression"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":strugglingShaftEnergyDrain"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingShaftCumTransforming"]},
						"addQueued" : true,
						"next" : "cumTransformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingCumTransformingImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingShaftEggify"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingEggifyImmune"]}}
					}}
				},
				"ballsL" : ".balls",
				"ballsR" : ".balls",
				"balls" : {
					"replace" : {
						"dialogueRandom" : [":strugglingBalls"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":strugglingBallsDigest"]},
							"next" : "cumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":strugglingBallsDigestImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":strugglingBallsHeal"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":strugglingBallsCompression"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":strugglingBallsEnergyDrain"]}}},
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingBallsCumTransforming"]},
						"addQueued" : true,
						"next" : "cumTransformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingCumTransformingImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":strugglingBallsEggify"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":strugglingEggifyImmune"]}}
					}}
				}
			},

			// when being prey, responses to the pred thats eating them
			// settings come from the pred, prey settings comes from itself
			"vored" : {
				"new" : {},
				"next" : "willing",
				"true" : {
					"next" : "voreType",
					"oralVore" : {"replace":{"dialogueRandom":[":voredOralVoreWilling"]}},
					"cockVore" : {"replace":{"dialogueRandom":[":voredCockVoreWilling"]}}
				},
				"false" : {
					"next" : "voreType",
					"oralVore" : {"replace":{"dialogueRandom":[":voredOralVore"]}},
					"cockVore" : {"replace":{"dialogueRandom":[":voredCockVore"]}}
				}
			},

			// when being prey, responses to the pred letting them out
			// settings come from the pred, prey settings comes from itself
			"escape" : {
				"next" : "struggleTrigger",
				"true" : { // prey struggled out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeStruggleTransforming"]},
							"addQueued" : true,
							"next" : "transformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeStruggleTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeStruggleEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeStruggleEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":escapeOralVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":escapeOralVoreStruggleDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeOralVoreStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":escapeOralVoreStruggleSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeOralVoreStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":escapeOralVoreStruggleHeal"]}}
						},
						"transforming" : ".escape.true.any.transforming",
						"eggify" : ".escape.true.any.eggify"
					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":escapeCockVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":escapeCockVoreStruggleDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeCockVoreStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":escapeCockVoreStruggleSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeCockVoreStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":escapeCockVoreStruggleHeal"]}}
						},
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeStruggleCumTransforming"]},
							"addQueued" : true,
							"next" : "cumTransformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeStruggleCumTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeStruggleEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeStruggleEggifyImmune"]}}
						}}
					}
				},
				"false" : { // pred let prey out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeTransforming"]},
							"addQueued" : true,
							"next" : "transformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":escapeOralVore"]
						},
						"seperateNext" : true,
						"next" : [
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":escapeOralVoreDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeOralVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":escapeOralVoreSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeOralVoreDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":escapeOralVoreHeal"]}}
						},
						"transforming" : ".escape.false.any.transforming",
						"eggify" : ".escape.false.any.eggify"
					},
					"cockVore" : {
						"replace" : {
							"dialogueRandom" : [":escapeCockVore"]
						},
						"seperateNext" : true,
						"next" : [
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":escapeCockVoreDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeCockVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":escapeCockVoreSoftDigest"]},
								"next" : "cumDigestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":escapeCockVoreDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":escapeCockVoreHeal"]}}
						},
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeCumTransforming"]},
							"addQueued" : true,
							"next" : "cumTransformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeCumTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":escapeEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":escapeEggifyImmune"]}}
						}}
					}
				}
			},

			// lines for when an NPC infuses someone (CTF, Boobsorb, etc.)
			"infusePrey" : {
				"new" : {"dismissTime" : 2},
				"next" : "location"
			},

			// lines for when a character is infused (CTF Boobsorb etc.)
			// settings for personality and race and mood would come from the infused character, things like location effect and etc would come from the pred
			"infused" : {
				"new" : {
					"dialogueRandom":[":infused"],
					"hideVoreButtons" : true
				},
				"next" : "location"
			},

			// lines for when a character is infused (CTF Boobsorb etc.) the pred teasing their occupant
			// the <infusedName> tag can also be used in any of the above vore context to use the name of the infused character, just make sure to have the lines within a special check for it
			"teaseInfused" : {
				"new" : {
					"dialogueRandom":[":teaseInfused"],
					"hideVoreButtons" : true
				},
				"next" : "location"
			},

			//lines of dialogue triggered when the horny meter hits 100% (the NPC climaxes)
			"climax" : {
				"new" : {
					"dialogueRandom":[":climax"],
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "location",
				"pussy":".womb",
				"womb" : {"replace" :{"dialogueRandom" : [":climaxWomb"]}},
				"breasts" : {"replace" :{"dialogueRandom" : [":climaxBreasts"]}},
				"cock":".shaft",
				"shaft" : {"replace" :{"dialogueRandom" : [":climaxShaft"]}},
				"ballsL":".balls",
				"ballsR":".balls",
				"balls" : {"replace" :{"dialogueRandom" : [":climaxBalls"]}}
			},

			// a line of dialogue triggered when size is changed by the size ray or something else
			"sizeChanged" : {
				"new" : {},
				"next":"shrinkOrGrow",
				"shrink" :{"replace" : {"dialogueRandom":[":shrinking"]}},
				"grow" :{"replace" : {"dialogueRandom":[":growing"]}}
			},
			// when stepping on a character small enough
			"didSteppy" : {
				"new" : {"dialogueRandom":[":didSteppy"]}
			},

			// when stepped on by a larger character
			"gotSteppy" : {
				"new" : {"dialogueRandom":[":gotStepped"]},
				"next" : "steppyType",
				"falling" :{"replace" : {"dialogueRandom":[":gotStomped"]}},
				"walking" :{"replace" : {"dialogueRandom":[":gotSteppedWalking"]}}
			}
		},
		// when hunting for prey, a checklist to have them only seek out prey that match the settings
		// any settings not defined in the checlkist for that vore type can be anything
		// such as a digestion pred not wanting to eat prey with digestion immunity, or not want to eat other preds, etc.
		"huntingChecklist" : {
			"default" : { // mood
				"preySettings" : {
					// "digestImmunity" : "false" // example for a pred that would only seek out prey they can digest
				},
				"settings" : {
					// "oralVorePred : "false" // example for a pred that wouldn't eat other oralVore preds
				}
			}
		},
		// when baiting a pred, a checklist to have them only seek out preds with certain settings
		// any settings not defined in the checlkist for that vore type can be anything
		// such as a prey not wanting to seek out preds that will digest them, or not wanting to seek out preds that do vore types they don't like, or not wanting to seek out preds who can also be prey
		"baitingChecklist" : {
			"default" : { // mood
				"preySettings" : {
					// "preyEnabled" : "false" // example for a prey that would only seek out pure preds, not switches
				},
				"settings" : {
					// "bellyEffect" : ["sbqRemoveBellyEffects","sbqHeal"] // example for a prey that would only seek out endo preds
				}
			}
		},

		// the pred prefrences and general settings for this NPC are set here!
		// set each one to the value you want, if there are any that are unset, they'll just go to the default values

		"sbqDefaultSettings" : {
			"mood" : "default",
			"personality" : "default",

			"bellyEffectSlot" : "none", // the settings in this group exist for each location, just use the correct name (belly, balls, shaft, womb, tail, breasts)
			//"bellyHammerspace" : false,
			//"bellyVisualMin" : 0,
			//"bellyVisualMax" : 2,
			//"bellyNoneEnable" : true,
			//"bellyHealEnable" : true,
			//"bellyDigestEnable" : true,
			//"bellySoftDigestEnable" : true,
			//"bellyDifficultyMod" : 0,
			"bellySounds" : true,

			"displayDigest" : false,

			"escapeDifficulty": 0,
			"escapeDifficultyMin": 0,
			"escapeDifficultyMax": 0,

			"impossibleEscape": false,
			"hammerspace" : false,


			// predator prefrences
			"oralVorePred" : true,
			"cockVorePred" : false
		},

		// any setting you define above can be modified by a player, this table allows you to define settings a player *cannot* modify, making sure your OC is always in line with your prefrences
		"sbqOverrideSettings" : {
			"shaftTFEnable" : false,
			"ballsTFEnable" : false,

			"crewmateGraduation" : false,

			"tailVorePred" : false,
			"absorbVorePred" : false,
			"navelVorePred" : false,

			"analVorePred" : false,
			"unbirthPred" : false,
			"breastVorePred" : false,

			"breasts" : false,
			"pussy" : false,

			"bellyInfusionPred" : false,
			"cockInfusionPred" : false,
			"pussyInfusionPred" : false,
			"breastsInfusionPred" : false,

			"cockVorePreferredPreySizeMin" : 0.1,
			"cockVorePreferredPreySizeMax" : 0.33,
			"cockVorePreferredPreySize" : 0.25
		},
		// prey enabled settings are down below, but here are the override settings, which follow the same rules as below, however, a player is *not* allowed to modify any of these settings
		// this is how you can enforce your OC only being prey for things they enjoy, or if they're prey at all
		"sbqOverridePreyEnabled" : {
			"femcumDigestAllow": false,
			"femcumSoftDigestAllow": false,
			"femcumDigestItemDropsAllow" : false,

			"milkDigestAllow": false,
			"milkSoftDigestAllow" : false,
			"milkDigestItemDropsAllow" : false,

			"transformAllow": false,
			"cumTransformAllow": false,
			"genderswapAllow": false,
			"eggAllow": false,

			"tailVore" : false,
			"absorbVore" : false,
			"navelVore" : false,

			"analVore" : false,
			"unbirth" : false,
			"breastVore" : false,

			"bellyInfusion" : false,
			"cockInfusion" : false,
			"pussyInfusion" : false,
			"breastsInfusion" : false
		},

		// rewards given to the player for doing things for the pred are here! cumulative ones accumulate time between different sessions, otherwise it only counts up per the current session
		// you can make a reward take both per session time as well as cumulative time!
		"sbqPredRewards" : {
			// Time is in minutes here!

			/*
			"exampleReward" : { // example reward that uses all possible args
				"repeatable" : true, // whether this reward repeats each time its requirements are met, a 5min reward would repeat at 10min and etc
				"location" : ["belly", "womb", "shaft", "balls", "breasts", "tail"], // whether the counters for this are for a specific location, it adds the timers and counters for all the locations listed in this arg, otherwise its just the overall count/time
				"pool" : "richOre", // the treasure pool this reward gives the player, look up how these are defined, make sure they don't conflict in name

				// per session, resets each time you escape the pred
				"minTime" : 1, // the minimum amount of time (minutes) in this session before this reward can be obtained (minutes)
				"time" : 5, // the amount of time (minutes) needed for this reward to trigger and between each repeat
				"minStruggles" : 1, // the amount of struggles (seconds) before this reward can be obtained
				"struggles" : 10, // the amount of struggles (seconds) for this reward to trigger between each repeat

				// cumulative, they never reset, and will continue to count up every time you are in this specific pred
				"minTimeCumulative" : 1, // the minimum amount of time (minutes) in this session before this reward can be obtained (minutes)
				"timeCumulative" : 5, // the amount of time (minutes) needed for this reward to trigger and between each repeat
				"minStrugglesCumulative" : 1, // the amount of struggles (seconds) before this reward can be obtained
				"strugglesCumulative" : 10 // the amount of struggles (seconds) for this reward to trigger between each repeat
			},
			*/


			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 0, "pool" : "sbqAkari_AkariKaen_Basic" },

			"hour1" : { "time" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3" : { "time" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours
			"day" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"struggleReward1" : { "repeatable" : true, "struggles" : 50, "minStruggles" : 0, "pool" : "sbqAkari_AkariKaen_Basic" },

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"dayCumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"weekCumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		},
		"sbqPreyRewards" : {
			// Time is in minutes here!
			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 10, "pool" : "sbqAkari_AkariKaen_Basic" },

			"hour3" : { "time" : 180, "pool" : "lowValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"digestedReward1" : { "repeatable" : true, "timesDigested" : 1, "pool" : "sbqAkari_AkariKaen_Basic"},
			"digestedReward2" : { "repeatable" : true, "timesDigested" : 5, "pool" : "lowValueQuestRewards"},

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1Cumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"week1Cumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		}


		// the args below are for randomizing specific settings between possible values in the table when the pred is first summoned, a few examples have been defined
		// specific OCs will probably have specific prefrences in mind, so you may not want things to randomize at all
		/*
		"sbqRandomizeSettings" : {
			"oralVorePred" : [true,false],

			"bellyEffectSlot" : [ "none", "heal", "softDigest", "digest"],

			// we shouldn't have the randomly generated preds generate with nsfw stuff
			// not everyone wants to stumble across an NPC with their dick out

			//"cockVorePred" : [true,false],
		}
		*/
	},
	"statusControllerSettings" : {
		"stats" : {
			"maxEnergy" : {
				"baseValue" : 100.0
			},
			"energyRegenPercentageRate" : {
				"baseValue" : 0.585  // 1.75 second recharge time (STABLE)
				// "baseValue" : 0.5    // 2 second recharge time
				// "baseValue" : 0.45      // 2.25 second recharge time
				// "baseValue" : 0.4     // 2.5 second recharge time
			},
			"foodDelta" : {
				"baseValue" : -0.0583 // -70 food over 20 minutes
			},
			"sbqLustScriptMax" : {
				"baseValue" : 0.5
			},
			"sbqLustScriptDelta" : {
				"baseValue" : 0.0583
			},
			"sbqLustDelta" : {
				"baseValue" : 0
			},
			"sbqRestScriptDelta" : {
				"baseValue" : -0.0583
			},
			"sbqRestDelta" : {
				"baseValue" : 0
			}
		},
		"resources" : {
			"food" : {
				"deltaStat" : "foodDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 70
			},
			"sbqLust" : {
				"deltaStat" : "sbqLustDelta",
				"initialPercentage" : 0.0,
				"maxValue" : 100
			},
			"sbqRest" : {
				"deltaStat" : "sbqRestDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 100
			}
		},
		"statusProperties" : {
			"sbqDidVornyConvertCheck" : true,

			// the prey prefrences for this NPC are set here!
			// set each one to the value you want, if there are any that are unset, they'll just go to the default values

			"sbqPreyEnabled" : {
				"preyEnabled" : true,

				"digestAllow": true,
				"softDigestAllow" : true,
				"digestItemDropsAllow" : true,

				"cumDigestAllow": true,
				"cumSoftDigestAllow": true,
				"cumDigestItemDropsAllow" : true,

				"held" : true,
				"cockVore" : true,
				"oralVore" : true,



				"femcumDigestAllow": false,
				"femcumSoftDigestAllow": false,
				"femcumDigestItemDropsAllow" : false,

				"milkDigestAllow": false,
				"milkSoftDigestAllow" : false,
				"milkDigestItemDropsAllow" : false,

				"transformAllow": false,
				"cumTransformAllow": false,
				"genderswapAllow": false,
				"eggAllow": false,

				"tailVore" : false,
				"absorbVore" : false,
				"navelVore" : false,

				"analVore" : false,
				"unbirth" : false,
				"breastVore" : false,

				"bellyInfusion" : false,
				"cockInfusion" : false,
				"pussyInfusion" : false,
				"breastsInfusion" : false
			}
		}
	},
	"items" : {
		"override" : [
			[0,
				[
					{
						"head" : [{
							"parameters" : {
								"colorIndex" : 8
							},
							"name" : "sbqBasicCollar",
							"count" : 1
						}],
						"chest" : [{
							"parameters" : {
								"directives" : "",
								"colorIndex" : 5
							},
							"name" : "coolchest",
							"count" : 1
						}],
						"legs" : [{
							"parameters" : {
								"directives" : "?replace;383838=00000000;b5b5b5=00000000;838383=00000000;b6b6b6=00000000;e6e6e6=00000000?replace;ffca8a=838383;e0975c=555555;a85636=383838;6f2919=151515",
								"colorIndex" : 1
							},
							"name" : "jeans1legs",
							"count" : 1
						}]
					}
				]
			]
		]
	}

}
