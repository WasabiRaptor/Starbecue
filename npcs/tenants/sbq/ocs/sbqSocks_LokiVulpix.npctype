{
	"type" : "sbqSocks_LokiVulpix",
	"baseType" : "villager",

	"scripts" : [
		"/npcs/bmain.lua",
		"/scripts/npc/SBQ_npc_bmain.lua",
		"/scripts/npc/SBQ_vore_npc.lua"
	],

	// you really should make sure to define the npcname so the OC actually has the OC's name
	"npcname" : "Socks",
	// identity is quite important if you don't want things to be randomly generated
	// great thing here is one can define whatever they want as the name of the hair, facial hair, or facial mask types, even if they're not
	// available to the player in normal customization it just has to be in the folder with the rest of the hairs for the species
	// if one knows how to make a directives string too, they can just define it here for the specific parts
	"identity" : {
		"hairType" : "0",
		"facialHairGroup" : "mane",
		"facialHairType" : "0"
	},
	"scriptConfig" : {
		"sbqNPC" : true,
		"isOC" : true, // this is just for scripts to identify this NPC as an OC and for some specific behavior relating to that
		"isPrey" : false,

		"behavior" : "sbqvorevillager",
		"questGenerator" : {
			"pools" : ["sbq_common", "sbq_transform", "sbq_vore", "tenant"],
			"graduation" : {
				"nextNpcType" : [] // this prevents the NPC from graduating into crew
			}
		},

		"hungerLabel" : "Stuffing",
		"hungerColor" : [207,218,255],


		"uniqueId" : "sbqSocks_LokiVulpix", // the unique ID for the NPC, used for other NPCs that may want to detect this specific one, and to prevent multiple instances of the same character appearing on one planet

		"defaultPortrait" : "Neutral.png",
		"portraitPath" : "/humanoid/sbqSocks_LokiVulpix/portraits/S",

		"tenantBio" : { "type" : "layout", "mode" : "h", "children" : [
			{ "type" : "image", "scale" : 0.75, "file" : "/humanoid/sbqSocks_LokiVulpix/portraits/SNeutral.png" },
			{ "type" : "scrollArea", "thumbScrolling" : true, "scrollBars" : true, "scrollDirections" : [0, 1], "children" : [
				{ "mode" : "vertical" },
				[ { "type" : "label", "text" : "Age: 22?"}, { "type" : "label", "text" : "Gender: female?"} ],
				[ { "type" : "label", "text" : "Pronouns: She/They/It"}, { "type" : "label", "text" : "Species: Plushie Flareon"} ],
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "Socks is, well a living plushie, she was made by Loki to be something to cuddle... but of course, she knows she was meant for quite a bit more than that."},
				{ "type" : "spacer", "size" : 3 },
				{ "type" : "label", "text" : "Favorites: UB, OV, TF, Living Suit"}
			]}
		]},

		"dialogueStepScripts" : ["/npcs/tenants/sbq/ocs/pet_dialogue_script.lua"],
		// as the scripts here are being called on both a UI and on the NPC, do avoid using the player or npc lua tables in such scripts unless said script would only trigger in the context of it having said table
		"dialogueTree" : {
			"dialogueFile" : "/npcs/tenants/sbq/ocs/sbqSocks_LokiVulpix.dialogue",
			// after following a path, next steps will automatically advance down the tree building the result dialogue

			// overall default values for a "new" dialogue
			"default" : {
				"dialogueRandom" : [":missingDialogue"],
				"jump" : ".converse" // if a part of the dialogue tree goes to a part that has no data for continuation via the button it will jump to which one of these it saw last while moving down the tree
			},
			// greeting is the default start of the tree
			// settings come from itself
			"greeting" : {
				"new" : {"jump" : ".converse"},
				"next" : "giveRewards",
				"rewards" : {
					"replace" : {"dialogueRandom" : [":defaultRewardsGreeting"]},
					"next" : ["introduced"],
					"true" : {
						"replace" : {"dialogueRandom" : [":defaultRewardsGreetingIntroduced"]}
					}
				},
				"default" : {
					"next" : ["introduced","isOwner"],
					"replace" : {"dialogueRandom" : [":defaultGreeting"]},
					"seperateNext" : true,
					"introduced" : { "true" : { "replace" : {
						"dialogueRandom" : [":introducedGreeting"]
					}}},
					"isOwner" : {"true" : { "replace" : {
						"dialogueRandom" : [":defaultGreetingCrew"]
					}}}
				}
			},
			"converse" : {
				"new" : {
					"dialogueRandom" : [":converse"],
					"buttonText" : ["[Options]"],
					"options" : [
						[ "* Pet", ".pet"],
						[ "My name is...", ".introduce", {"check" : {"introduced" : false}}]
					]
				},
				"next" : ["isOwner", "otherOptions"],
				"true" : {
					"addQueued" : true,
					"queueReplace" : {
						"options" : [
							["Stay", ["swapFollowing"]]
						]
					},
					"next" : ["isFollowing"],
					"false" : {
						"queueReplace" : {
							"options" : [
								["Follow", ["swapFollowing"]]
							]
						}
					}
				},
				"otherOptions" : {
					"add" : {
						"options" : [
							["Tell me about yourself", ".talkAboutSelf", {"check" : {"introduced" : true}}],
							["Tell me about your body", ".talkAboutBody", {"check" : {"introduced" : true}}],
							//["Lets talk about kinks", ".talkAboutKinks", {"check" : {"introduced" : true}}],
							["Have any fun stories?", ".tellAStory", {"check" : {"introduced" : true}}]
						]
					}
				},
				"stay" : {
					"new" : {
						"dialogueRandom" : [":defaultCrewStay"],
						"jump" : ".converse"
					}
				},
				"follow" : {
					"new" : {
						"dialogueRandom" : [":defaultCrewFollow"],
						"jump" : ".converse"
					}
				},
				"fullCrew" : {
					"new" : {
						"dialogueRandom" : [":fullCrew"],
						"jump" : ".converse"
					}
				},
				"introduce" :{
					"new" : {
						"playerSaveSettings" : { "introduced" : true },
						"dialogue" : ":introduce",
						"jump" : ".converse"
					}
				}
			},
			"talkAboutSelf" : {
				"new" : {
					"dialogueRandom" : [":talkAboutSelf"],
					"buttonText" : ["[Options]"],
					"options" : [
						["What Are You?", ".whatAreYou"],
						["Have Any Friends?", ".friends"],
						["Tell me about your body", ".talkAboutBody"],
						//["Lets talk about kinks", ".talkAboutKinks"],
						["Have any fun stories?", ".tellAStory"],
						["Thats it for now", ".converse" ]
					]
				},
				"whatAreYou" : {
					"new" : {
						"dialogue" : ":talkAboutSelfWhatAreYou",
						"jump" : ".talkAboutSelf"
					}
				},
				"friends" : {
					"new" : {
						"dialogue" : ":talkAboutSelfFriends",
						"jump" : ".talkAboutSelf"
					}
				}
			},
			"talkAboutKinks" : {
				"new" : {
					"buttonText" : ["[Options]"],
					"dialogueRandom" : [":talkAboutKinks"],
					"options" : [
					]
				}
			},
			"talkAboutBody" : {
				"new" : {
					"buttonText" : ["[Options]"],
					"dialogueRandom" : [":talkAboutBody"],
					"options" : [
						["Belly", ".belly"],
						["Womb", ".womb"],
						["Thats it for now", ".converse" ]
					]
				},
				"belly" : {
					"new" : {
						"location" : "belly",
						"dialogue" : ":talkAboutBodyBelly",
						"jump" : ".talkAboutBody"
					},
					"next" : ["locationEffectSlot"],
					"seperateNext" : true,
					"locationEffectSlot" : {
						"heal" : { "replace" :{
							"dialogue" : ":talkAboutBodyBellyHeal"
						}}
					}
				},
				"womb" : {
					"new" : {
						"location" : "womb",
						"dialogue" : ":talkAboutBodyWomb",
						"jump" : ".talkAboutBody"
					},
					"next" : ["locationEffectSlot"],
					"seperateNext" : true,
					"locationEffectSlot" : {
						"heal" : { "replace" :{
							"dialogue" : ":talkAboutBodyWombHeal"
						}}
					}
				}

			},
			"tellMeAStory" : {
				"new" : {
					"buttonText" : ["[Options]"],
					"dialogueRandom" : [":tellMeAStory"],
					"options" : [
						["(UB) Creation", ".creation" ],
						["(UB) Jaych", ".jaychMeeting" ],
						["Thats it for now", ".converse" ]
					]
				},
				"creation" : {
					"new" : {
						"buttonText" : ["->"],
						"dialogue" : ":creationStoryPt1",
						"continue" : {
							"nearUniqueId" : ["sbqLoki_LokiVulpix"],
							"path" : ".interrupted",
							"fail" : ".uninterrupted"
						}
					},
					"uninterrupted" :{
						"new" : {
							"buttonText" : ["->"],
							"dialogue" : ":creationStoryPt2",
							"playerSaveSettings" : { "heardLokiCreationStory" : true },
							"jump" : ".tellMeAStory"
						}
					},
					"interrupted" : {
						"new" : {
							"buttonText" : ["->"],
							"dialogue" : ":creationStoryLokiInterrupts",
							"playerSaveSettings" : { "lokiInterruptedCreationStory" : true },
							"jump" : ".tellMeAStory"
						}
					}
				},
				"jaychMeeting" : {
					"new" : {
						"buttonText" : ["->"],
						"dialogue" : ":jaychMeetingStory",
						"playerSaveSettings" : { "heardJaychMeetingStory" : true },
						"jump" : ".tellMeAStory"
					}
				}
			},
			"pet" : {
				"new" : {
					"dialogueRandom" : [":normalPet"],
					"buttonText" : ["[Back]"],
					"jump" : ".converse",
					"optionsAlign" : "left",
					"optionsW" : 100,
					"options" : [
						[ "* Pet", ".pet"]
					]
				},
				"next" : "petting",
				"many" : {
					"replace" : {
						"buttonText" : ["[ACT]"],
						"jump" : ".pet"
					}
				},
				"excessive" : {
					"replace" : {
						"buttonText" : ["[ACT]"],
						"jump" : ".pet"
					}
				},
				"problem" : {
					"replace" : {
						"dialogueRandom" : [":problemPet"],
						"buttonText" : ["[ACT]"],
						"jump" : ".pet"
					}
				}
			},
			// lines triggered when a player may recieve a certain reward
			"rewardNotify" :{
				"new" : {},
				"next" : ["poolName", "rewardName"],
				"money" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMoney"]}
				},
				"lowValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyLowValueQuestRewards"]}
				},
				"mediumValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyMediumValueQuestRewards"]}
				},
				"highValueQuestRewards" : {
					"replace" : {"dialogueRandom":[":rewardNotifyHighValueQuestRewards"]}
				}
			},

			// lines for when a pred is eating prey, be it from hunting, or from it being requested
			// settings come from itself
			"vore" : {
				"new" : {
					"delay" : 1.5,
					"dismissTime" : 3,
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "voreType",
				"oralVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultRequestOralVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultRequestOralVoreAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedOralVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedOralVoreAfter"]}
						}
					},
					"selfRequest" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":defaultSelfRequestOralVore"],
							"buttonText" : ["[Y/N]"],
							"options" : [
								["Yes!", ".oralVore.selfRequest.response.yes" ],
								["No.", ".oralVore.selfRequest.response.no" ],
								["No... ^#555;(But actually Yes)", ".oralVore.selfRequest.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestOralVoreYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestOralVoreNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestOralVoreNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : [":defaultNotFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : [":defaultTooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : [":defaultTooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":defaultOralVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestOralVoreFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":compressionOralVoreFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : [":defaultFull"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : [":defaultNeedsInfusion"]}
					}
				},
				"analVore" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultRequestAnalVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultRequestAnalVoreAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedAnalVoreBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedAnalVoreAfter"]}
						}
					},
					"selfRequest" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":defaultSelfRequestAnalVore"],
							"buttonText" : ["[Y/N]"],
							"options" : [
								["Yes!", ".analVore.selfRequest.response.yes" ],
								["No.", ".analVore.selfRequest.response.no" ],
								["No... ^#555;(But actually Yes)", ".analVore.selfRequest.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestAnalVoreYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestAnalVoreYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestAnalVoreNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestAnalVoreNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestAnalVoreNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : [":defaultNotFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : [":defaultTooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : [":defaultTooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":defaultAnalVoreFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestAnalVoreFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":compressionAnalVoreFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : [":defaultFull"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : [":defaultNeedsInfusion"]}
					}
				},
				"unbirth" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultRequestUnbirthBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultRequestUnbirthAfter"]}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedUnbirthBefore"]}
						},
						"after" : {
							"replace" : {"dialogueRandom" : [":defaultUnpromptedUnbirthAfter"]}
						}
					},
					"selfRequest" : {
						"replace" : {
							"dismissTime" : 30,
							"dialogueRandom" : [":defaultSelfRequestUnbirth"],
							"buttonText" : ["[Y/N]"],
							"options" : [
								["Yes!", ".unbirth.selfRequest.response.yes" ],
								["No.", ".unbirth.selfRequest.response.no" ],
								["No... ^#555;(But actually Yes)", ".unbirth.selfRequest.response.noYes" ]
							]
						},
						"response" : {
							"yes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestUnbirthYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestUnbirthYesAfter"],
										"dismissTime" : 2
									}
								}
							},
							"no" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestUnbirthNo"],
									"dismissTime" : 2
								}
							},
							"noYes" : {
								"new" : {
									"dialogueRandom" : [":defaultSelfRequestUnbirthNoYes"],
									"dismissTime" : 2
								},
								"next" : ["queueVore"],
								"after" : {
									"new" : {
										"dialogueRandom" : [":defaultSelfRequestUnbirthNoYesAfter"],
										"dismissTime" : 2
									}
								}
							}
						}
					},
					"notFeelingIt" : {
						"replace" : {"dialogueRandom" : [":defaultNotFeelingIt"]}
					},
					"tooBig" : {
						"replace" : {"dialogueRandom" : [":defaultTooBig"]}
					},
					"tooSmall" : {
						"replace" : {"dialogueRandom" : [":defaultTooSmall"]}
					},
					"full" : {
						"replace" : {"dialogueRandom" : [":defaultUnbirthFull"]},
						"next" : [
							"locationEffectSlot",
							"locationCompression"
						],
						"softDigest" : ".digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestUnbirthFull"]}
						},
						"time" : { // compression
							"queueReplace" : {"dialogueRandom" : [":compressionUnbirthFull"]},
							"addQueued" : true
						}
					},
					"otherLocationFull" : {
						"replace" : {"dialogueRandom" : [":defaultFull"]}
					},
					"needsInfusion" : {
						"replace" : {"dialogueRandom" : [":defaultNeedsInfusion"]}
					}
				}

			},

			// when being pred, responses to the prey struggling inside
			// settings come from itself, prey settings come from prey
			"struggle" : {
				"new" : {
					"hideVoreButtons" : true,
					"dialogueRandom" : [":defaultStruggle"]
				},
				"next" : "location",
				"any" : {
					"transforming" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":transformingStruggle"]},
						"addQueued" : true,
						"next" : "transformAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":transformingStruggleImmune"]}}
					}},
					"eggify" : {"true" : {
						"queueReplace" : {"dialogueRandom" : [":eggifyStruggle"]},
						"addQueued" : true,
						"next" : "eggAllow",
						"false" : {"queueReplace":{"dialogueRandom" : [":eggifyStruggleImmune"]}}
					}}
				},
				"taurBelly" : ".belly",
				"belly" : {
					"replace" : {
						"dialogueRandom" : [":defaultStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":digestStruggle"]},
							"next" : "digestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":digestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":healStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":compressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":energyDrainStruggle"]}}},
					"transforming" : ".struggle.any.transforming",
					"eggify" : ".struggle.any.eggify"
				},
				"womb" : {
					"replace" : {
						"dialogueRandom" : [":wombDefaultStruggle"]
					},
					"seperateNext" : true,
					"next" : [
						"locationEffectSlot",
						"locationCompression",
						"locationEnergyDrain",
						"eggify",
						"transforming"
					],
					"locationEffectSlot" : {
						"softDigest" : ".locationEffectSlot.digest",
						"digest" : {
							"replace" : {"dialogueRandom" : [":wombDigestStruggle"]},
							"next" : "femcumDigestImmunity",
							"true" : {"replace" : {"dialogueRandom" : [":wombDigestStruggleImmune"]}}
						},
						"heal" : { "replace" : {"dialogueRandom" : [":wombHealStruggle"]}}
					},
					"locationCompression" : { "time" : { "add" : { "dialogueRandom" : [":wombCompressionStruggle"]}}},
					"locationEnergyDrain" : { "true" : { "add" : { "dialogueRandom" : [":wombEnergyDrainStruggle"]}}},
					"transforming" : ".struggle.any.transforming",
					"eggify" : ".struggle.any.eggify"
				}
			},

			// when being pred, responses to the prey escaping
			// settings come from itself, prey settings come from the prey
			"letout" : {
				"next" : "struggleTrigger",
				"true" : { // prey struggled out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleTransforming"]},
							"addQueued" : true,
							"next" : ["transformAllow"],
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutStruggleEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutStruggleEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutOralVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutOralVoreStruggleDigested"]
								},
								"finished" : true

							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleDigestImmune"]}
								}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleSoftDigest"]},
								"next" : ["digestImmunity"],
								"true" : {
									"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleDigestImmune"]}
								}
							},
							"heal" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreStruggleHeal"]}
							}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					},
					"analVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutAnalVoreStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutAnalVoreStruggleDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutAnalVoreStruggleDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutAnalVoreStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutAnalVoreStruggleSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutAnalVoreStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutAnalVoreStruggleHeal"]}}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					},
					"unbirth" : {
						"replace" : {
							"dialogueRandom" : [":letoutUnbirthStruggle"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutUnbirthStruggleDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutUnbirthStruggleDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutUnbirthStruggleDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutUnbirthStruggleSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutUnbirthStruggleDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutUnbirthStruggleHeal"]}}
						},
						"transforming" : ".letout.true.any.transforming",
						"eggify" : ".letout.true.any.eggify"
					}
				},
				"false" : { // pred let prey out
					"next" : "voreType",
					"any" : {
						"transforming" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutTransforming"]},
							"addQueued" : true,
							"next" : "transformAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutTransformingImmune"]}}
						}},
						"eggify" : {"true" : {
							"queueReplace" : {"dialogueRandom" : [":letoutEggify"]},
							"addQueued" : true,
							"next" : "eggAllow",
							"false" : {"queueReplace":{"dialogueRandom" : [":letoutEggifyImmune"]}}
						}}
					},
					"oralVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutOralVore"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutOralVoreDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutOralVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutOralVoreSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutOralVoreDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutOralVoreHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"

					},
					"analVore" : {
						"replace" : {
							"dialogueRandom" : [":letoutAnalVore"]
						},
						"seperateNext" : true,
						"next" : [
							"digested",
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutAnalVoreDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutAnalVoreDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutAnalVoreDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutAnalVoreSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutAnalVoreDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutAnalVoreHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"

					},
					"unbirth" : {
						"replace" : {
							"dialogueRandom" : [":letoutUnbirth"]
						},
						"seperateNext" : true,
						"next" : [
							"locationEffectSlot",
							"eggify",
							"transforming"
						],
						"digested" : {
							"true" : {
								"replace" : {
									"dialogueRandom" : [":letoutUnbirthDigested"]
								},
								"finished" : true
							}
						},
						"locationEffectSlot" : {
							"digest" : {
								"replace" : {"dialogueRandom" : [":letoutUnbirthDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutUnbirthDigestImmune"]}}
							},
							"softDigest" : {
								"replace" : {"dialogueRandom" : [":letoutUnbirthSoftDigest"]},
								"next" : "digestImmunity",
								"true" : {"replace" : {"dialogueRandom" : [":letoutUnbirthDigestImmune"]}}
							},
							"heal" : { "replace" : {"dialogueRandom" : [":letoutUnbirthHeal"]}}
						},
						"transforming" : ".letout.false.any.transforming",
						"eggify" : ".letout.false.any.eggify"
					}
				}
			},

			// for when an NPC is requesting a player or other NPC eats them
			"preyRequest" : {
				"new" : { "dialogueRandom" : [":error"]}
			},
			// for when being prey and forcing their way into a pred without asking
			"forcingPrey" : {
				"new" : { "dialogueRandom" : [":error"]}
			},
			// when being pred, response to prey forcing their way in unwillingly
			"unwillingPred" : {
				"new" : {},
				"next" : "voreType",
				"oralVore" : {
					"replace" : { "dialogueRandom" : [":defaultUnwillingPredOralVore"]}
				},
				"analVore" : {
					"replace" : { "dialogueRandom" : [":defaultUnwillingPredAnalVore"]}
				},
				"unbirth" : {
					"replace" : { "dialogueRandom" : [":defaultUnwillingPredUnbirth"]}
				}
			},

			// when being prey, responses to the pred that ate them as they struggle
			// settings come from the pred, prey settings comes from itself
			"struggling" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// when being prey, responses to the pred thats eating them
			// settings come from the pred, prey settings comes from itself
			"vored" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// when being prey, responses to the pred letting them out
			// settings come from the pred, prey settings comes from itself
			"escape" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// lines for when an NPC infuses someone (CTF, Boobsorb, etc.)
			"infusePrey" : {
				"new" : {"dismissTime" : 2},
				"next" : "location",
				"womb" : ".pussy",
				"pussy" : {
					"next" : "voreResponse",
					"request" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseRequestPussyBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestPussyBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseRequestPussyAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseRequestPussyAfterLayer"]}}
						}
					},
					"unprompted" : {
						"next" : "doingVore",
						"before" : {
							"replace" : { "dialogueRandom" : [":infuseUnpromptedPussyBefore"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseUnpromptedPussyBeforeLayer"]}}
						},
						"after" : {
							"replace" : { "dialogueRandom" : [":infuseUnpromptedPussyAfter"]},
							"next" : "infuselayered",
							"true" : {"replace" : { "dialogueRandom" : [":infuseUnpromptedPussyAfterLayer"]}}
						}
					},
					"notFeelingIt" : { "replace" : {"dialogueRandom" : [":defaultNotFeelingIt"]} }

				}
			},

			// lines for when a character is infused (CTF Boobsorb etc.)
			// settings for personality and race and mood would come from the infused character, things like location effect and etc would come from the pred
			"infused" : {
				"new" : { "dialogueRandom" : [":error"]}
			},

			// lines for when a character is infused (CTF Boobsorb etc.) the pred teasing their occupant
			// the <infusedName> tag can also be used in any of the above vore context to use the name of the infused character, just make sure to have the lines within a special check for it
			"teaseInfused" : {
				"new" : {
					"dialogueRandom":[":teaseInfused"],
					"hideVoreButtons" : true
				},
				"next" : "location",
				"womb":".pussy",
				"pussy" : {"replace" :{"dialogueRandom" : [":teaseInfusedPussy"]}}
			},

			//lines of dialogue triggered when the horny meter hits 100% (the NPC climaxes)
			"climax" : {
				"new" : {
					"dialogueRandom":[":climax"],
					"hideVoreButtons" : true,
					"hideInfusionButtons" : true
				},
				"next" : "location",
				"pussy":".womb",
				"womb" : {"replace" :{"dialogueRandom" : [":climaxWomb"]}}
			},


			// a line of dialogue triggered when size is changed by the size ray or something else
			"sizeChanged" : {
				"new" : {},
				"next":"shrinkOrGrow",
				"shrink" :{"replace" : {"dialogueRandom":[":shrinking"]}},
				"grow" :{"replace" : {"dialogueRandom":[":growing"]}}
			},
			// when stepping on a character small enough
			"didSteppy" : {
				"new" : {"dialogueRandom":[":didSteppy"]}
			},

			// when stepped on by a larger character
			"gotSteppy" : {
				"new" : {"dialogueRandom":[":gotStepped"]},
				"next" : "steppyType",
				"falling" :{"replace" : {"dialogueRandom":[":gotStomped"]}}
			}
		},

		"sbqPredRewards" : {
			// Time is in minutes here!
			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 0, "pool" : "ore" },
			"timedReward2" : { "repeatable" : true, "time" : 10, "minTime" : 20, "pool" : "richOre" },

			"hour1" : { "time" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3" : { "time" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours
			"day" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"dayCumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"weekCumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		},
		"sbqPreyRewards" : {
			// Time is in minutes here!
			"timedReward1" : { "repeatable" : true, "time" : 5, "minTime" : 10, "pool" : "ore" },

			"hour3" : { "time" : 180, "pool" : "lowValueQuestRewards" }, // three hours
			"hour6" : { "time" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12" : { "time" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1" : { "repeatable" : true, "time" : 1440, "pool" : "highValueQuestRewards" }, // a full day

			"digestedReward1" : { "repeatable" : true, "timesDigested" : 1, "pool" : "ore"},
			"digestedReward2" : { "repeatable" : true, "timesDigested" : 5, "pool" : "lowValueQuestRewards"},

			"hour1Cumulative" : { "timeCumulative" : 60, "pool" : "lowValueQuestRewards" }, // one hour
			"hour3Cumulative" : { "timeCumulative" : 180, "pool" : "mediumValueQuestRewards" }, // three hours
			"hour6Cumulative" : { "timeCumulative" : 360, "pool" : "mediumValueQuestRewards" }, // six hours
			"hour12Cumulative" : { "timeCumulative" : 720, "pool" : "highValueQuestRewards" }, // twelve hours

			"day1Cumulative" : { "repeatable" : true, "timeCumulative" : 1440, "pool" : "highValueQuestRewards" }, // a full day
			"week1Cumulative" : { "repeatable" : true, "timeCumulative" : 10080, "pool" : "highValueQuestRewards" } // a full week
		},


		// when hunting for prey, a checklist to have them only seek out prey that match the settings
		// any settings not defined in the checlkist for that vore type can be anything
		// such as a digestion pred not wanting to eat prey with digestion immunity, or not want to eat other preds, etc.
		"huntingChecklist" : {
			"default" : { // mood
				"preySettings" : {
					// "digestImmunity" : "false" // example for a pred that would only seek out prey they can digest
				},
				"settings" : {
					// "oralVorePred : "false" // example for a pred that wouldn't eat other oralVore preds
				}
			}
		},
		// when baiting a pred, a checklist to have them only seek out preds with certain settings
		// any settings not defined in the checlkist for that vore type can be anything
		// such as a prey not wanting to seek out preds that will digest them, or not wanting to seek out preds that do vore types they don't like, or not wanting to seek out preds who can also be prey
		"baitingChecklist" : {
			"default" : { // mood
				"preySettings" : {
					// "preyEnabled" : "false" // example for a prey that would only seek out pure preds, not switches
				},
				"settings" : {
					// "bellyEffect" : ["sbqRemoveBellyEffects","sbqHeal"] // example for a prey that would only seek out endo preds
				}
			}
		},

		// the pred prefrences and general settings for this NPC are set here!
		// set each one to the value you want, if there are any that are unset, they'll just go to the default values

		"sbqDefaultSettings" : {
			"mood" : "default",
			"personality" : "default",

			"bellyEffectSlot" : "heal",
			"wombEffectSlot" : "heal",
			"tailEffectSlot" : "heal",

			"bellyEffect" : "sbqHeal",
			"wombEffect" : "sbqHeal",
			"tailEffect" : "sbqHeal",

			"displayDigest" : true,

			"escapeDifficulty": 0,
			"escapeDifficultyMin": 0,
			"escapeDifficultyMax": 0,

			"impossibleEscape": false,

			"hammerspace" : true,

			// predator prefrences
			"oralVorePred" : true,

			"analVorePred" : true,
			"unbirthPred" : true,
			"breastVorePred" : false
		},

		// any setting you define above can be modified by a player, this table allows you to define settings a player *cannot* modify, making sure your OC is always in line with your prefrences
		"sbqOverrideSettings" : {
			"crewmateGraduation" : false,

			"digestEnable" : false,
			"bellyDigestEnable" : false,
			"bellySoftDigestEnable" : false,
			"shaftDigestEnable" : false,
			"shaftSoftDigestEnable" : false,
			"ballsDigestEnable" : false,
			"ballsSoftDigestEnable" : false,
			"wombDigestEnable" : false,
			"wombSoftDigestEnable": false,

			"defaultInfusedSize" : true,

			"bellyPredDigestDrops" : false,
			"tailPredDigestDrops" : false,
			"wombPredDigestDrops" : false,

			"tailVorePred" : false,
			"absorbVorePred" : false,
			"navelVorePred" : false,

			"bellySounds" : false
		},
		// prey enabled settings are down below, but here are the override settings, which follow the same rules as below, however, a player is *not* allowed to modify any of these settings
		// this is how you can enforce your OC only being prey for things they enjoy, or if they're prey at all
		"sbqOverridePreyEnabled" : {
			"preyEnabled": false,

			"navelVore" : false,

			"digestItemDropsAllow" : false,
			"femcumDigestItemDropsAllow" : false,

			"digestAllow": false,
			"cumDigestAllow": false,
			"milkDigestAllow": false,
			"cumTransformAllow": false,
			"femcumDigestAllow": false,
			"femcumSoftDigestAllow": false,

			"transformAllow": false,
			"genderswapAllow": false
		}
	},
	"statusControllerSettings" : {
		"stats" : {
			"maxEnergy" : {
				"baseValue" : 100.0
			},
			"energyRegenPercentageRate" : {
				"baseValue" : 0.585  // 1.75 second recharge time (STABLE)
				// "baseValue" : 0.5    // 2 second recharge time
				// "baseValue" : 0.45      // 2.25 second recharge time
				// "baseValue" : 0.4     // 2.5 second recharge time
			},
			"foodDelta" : {
				"baseValue" : -0.0583 // -70 food over 20 minutes
			},
			"sbqLustScriptMax" : {
				"baseValue" : 0.5
			},
			"sbqLustScriptDelta" : {
				"baseValue" : 0.0583
			},
			"sbqLustDelta" : {
				"baseValue" : 0
			},
			"sbqRestScriptDelta" : {
				"baseValue" : -0.0583
			},
			"sbqRestDelta" : {
				"baseValue" : 0
			}
		},
		"resources" : {
			"food" : {
				"deltaStat" : "foodDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 70
			},
			"sbqLust" : {
				"deltaStat" : "sbqLustDelta",
				"initialPercentage" : 0.0,
				"maxValue" : 100
			},
			"sbqRest" : {
				"deltaStat" : "sbqRestDelta",
				"initialPercentage" : 1.0,
				"maxValue" : 100
			}
		},
		"statusProperties" : {
			"sbqDidVornyConvertCheck" : true,

			// the prey prefrences for this NPC are set here!
			// set each one to the value you want, if there are any that are unset, they'll just go to the default values

			"sbqPreyEnabled" : {

				"eggAllow": true,

				"held": true,

				"oralVore": true,
				"tailVore": true,
				"absorbVore": true,

				"analVore": true,
				"unbirth": true,
				"cockVore": true,
				"breastVore": true
			}
		}
	}
}
